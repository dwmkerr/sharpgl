<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGL.SceneGraph</name>
    </assembly>
    <members>
        <member name="T:SharpGL.SceneGraph.Quadrics.Orientation">
            <summary>
            The Quadric orientation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Orientation.Outside">
            <summary>
            Outside.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Orientation.Inside">
            <summary>
            Inside.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Helpers.HasObjectSpaceHelper">
            <summary>
            Helps with implementing IHasObjectSpace.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.IDeepCloneable`1">
            <summary>
            IDeepCloneable objects can create a deep clone of themselves.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpGL.SceneGraph.IDeepCloneable`1.DeepClone">
            <summary>
            Creates a deep clones of this instance.
            </summary>
            <returns>A deep clone of this instance.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.HasObjectSpaceHelper.PushObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pushes us into Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.HasObjectSpaceHelper.PopObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pops us from Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.HasObjectSpaceHelper.DeepClone">
            <summary>
            Deeps the clone.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Helpers.HasObjectSpaceHelper.transformation">
            <summary>
            The linear transformation
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Helpers.HasObjectSpaceHelper.Transformation">
            <summary>
            Gets or sets the transformation.
            </summary>
            <value>
            The transformation.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.FreezableHelper.Freeze(SharpGL.OpenGL,SharpGL.SceneGraph.Core.IRenderable)">
            <summary>
            Freezes the specified instance.
            </summary>
            <param name="gl">The gl instance.</param>
            <param name="renderable">The renderable.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.FreezableHelper.Render(SharpGL.OpenGL)">
            <summary>
            Renders the specified gl.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.FreezableHelper.Unfreeze(SharpGL.OpenGL)">
            <summary>
            Unfreezes the specified gl.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Helpers.FreezableHelper.displayList">
            <summary>
            The display list internally.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Helpers.FreezableHelper.isFrozen">
            <summary>
            If true, we're frozen.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Helpers.FreezableHelper.IsFrozen">
            <summary>
            Gets a value indicating whether this instance is frozen.
            </summary>
            <value>
              <c>true</c> if this instance is frozen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IHasOpenGLContext">
            <summary>
            Any element or asset which has an OpenGL context has some 
            associated OpenGL resource. This means that when it is loaded
            from file, it may need to be re-created, or if it is moved
            between OpenGL contexts it may need to be re-created.
            Any object that has an OpenGL context has a Create method, a 
            Destroy Method and a CurrentContext property.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IHasOpenGLContext.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IHasOpenGLContext.DestroyInContext(SharpGL.OpenGL)">
            <summary>
            Destroy in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.IHasOpenGLContext.CurrentOpenGLContext">
            <summary>
            Gets the current OpenGL that the object exists in context.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.ViewportAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.OpenGLAttributeGroup">
            <summary>
            The OpenGLAttributeGroup is the base for groups of opengl attributes.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.OpenGLAttributeGroup.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.OpenGLAttributeGroup.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>True if any attributes are set</returns>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.OpenGLAttributeGroup.Push(SharpGL.OpenGL)">
            <summary>
            Pushes the attributes onto the specified OpenGL attribute stack.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.OpenGLAttributeGroup.Pop(SharpGL.OpenGL)">
            <summary>
            Pops the attributes off the specified OpenGL attribute stack.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="F:SharpGL.OpenGLAttributes.OpenGLAttributeGroup.attributeFlags">
            <summary>
            The attribute flags for the group.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.OpenGLAttributeGroup.AttributeFlags">
            <summary>
            Gets the attribute flags.
            todo use get only, xmlignore and don't store them - return them on the fly.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ViewportAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.ViewportAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ViewportAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ViewportAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ViewportAttributes.ViewportX">
            <summary>
            Gets or sets the viewport X.
            </summary>
            <value>
            The viewport X.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ViewportAttributes.ViewportY">
            <summary>
            Gets or sets the viewport Y.
            </summary>
            <value>
            The viewport Y.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ViewportAttributes.ViewportWidth">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
            <value>
            The width of the viewport.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ViewportAttributes.ViewportHeight">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
            <value>
            The height of the viewport.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ViewportAttributes.DepthRangeNear">
            <summary>
            Gets or sets the depth range near.
            </summary>
            <value>
            The depth range near.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ViewportAttributes.DepthRangeFar">
            <summary>
            Gets or sets the depth range far.
            </summary>
            <value>
            The depth range far.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.StencilBufferAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.StencilBufferAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.StencilBufferAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.StencilBufferAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.StencilBufferAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.EnableStencilTest">
            <summary>
            Gets or sets the enable stencil test.
            </summary>
            <value>
            The enable stencil test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.StencilFunction">
            <summary>
            Gets or sets the stencil function.
            </summary>
            <value>
            The stencil function.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.StencilReference">
            <summary>
            Gets or sets the stencil reference.
            </summary>
            <value>
            The stencil reference.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.StencilMask">
            <summary>
            Gets or sets the stencil mask.
            </summary>
            <value>
            The stencil mask.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.StencilClearIndex">
            <summary>
            Gets or sets the index of the stencil clear.
            </summary>
            <value>
            The index of the stencil clear.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.StencilWriteMask">
            <summary>
            Gets or sets the stencil write mask.
            </summary>
            <value>
            The stencil write mask.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.OperationFail">
            <summary>
            Gets or sets the operation fail.
            </summary>
            <value>
            The operation fail.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.OperationDepthFail">
            <summary>
            Gets or sets the operation depth pass.
            </summary>
            <value>
            The operation depth pass.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.StencilBufferAttributes.OperationDepthPass">
            <summary>
            Gets or sets the operation depth pass.
            </summary>
            <value>
            The operation depth pass.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Teapot">
            <summary>
            The standard OpenGL teapot.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.SceneElement">
            <summary>
            The base class for all elements in a scene. Anything in
            the scene tree is a Scene Element. Scene elements can
            have children but are very lacking in functionality -
            implement 
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.Traverse">
            <summary>
            Traverses this instance. Traversing simply returns 
            the children and all descendents in the correct order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.Traverse(System.Predicate{SharpGL.SceneGraph.Core.SceneElement})">
            <summary>
            Traverses this instance. Traversing simply returns
            the children and all descendents in the correct order.
            This traversal allows for a predicate to be used.
            </summary>
            <param name="predicate">The predicate for traversal.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.Traverse``1">
            <summary>
            Traverses this instance. Traversing simply returns 
            the children and all descendents of type T in the correct order.
            </summary>
            <typeparam name="T">The type of object to traverse for.</typeparam>
            <returns>The full set of T objects in the scene.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.Traverse``1(System.Predicate{``0})">
            <summary>
            Traverses this instance. Traversing simply returns
            the children and all descendents of type T in the correct order.
            </summary>
            <typeparam name="T">The type of object to traverse for.</typeparam>
            <param name="predicate">The predicate for traversal.</param>
            <returns>
            The full set of T objects in the scene.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.TraverseToRootElement">
            <summary>
            Traverses to root element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Core.SceneElement"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.AddChild(SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child scene element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.RemoveChild(SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Removes the child scene element.
            </summary>
            <param name="child">The child scene element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.AddEffect(SharpGL.SceneGraph.Effects.Effect)">
            <summary>
            Adds an effect.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.RemoveEffect(SharpGL.SceneGraph.Effects.Effect)">
            <summary>
            Removes the effect.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Core.SceneElement.children">
            <summary>
            The children of the element.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Core.SceneElement.effects">
            <summary>
            The effects.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.SceneElement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.SceneElement.Effects">
            <summary>
            Gets the effects.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.SceneElement.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.SceneElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.SceneElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IRenderable">
            <summary>
            A Scene Element can implement this interface to enable rendering
            functionality. Note that many scene elements (materials etc) are
            not actually drawn.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IRenderable.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IHasMaterial">
            <summary>
            The IHasMaterial interface can be implemented by any scene object
            to allow a material to be associated with the object.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.IHasMaterial.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Teapot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Primitives.Teapot"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Teapot.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Teapot.Draw(SharpGL.OpenGL,System.Int32,System.Double,System.UInt32)">
            <summary>
            Draws the specified gl.
            </summary>
            <param name="gl">The gl.</param>
            <param name="grid">The grid.</param>
            <param name="scale">The scale.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Teapot.Grid">
            <summary>
            Gets or sets the grid.
            </summary>
            <value>
            The grid.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Teapot.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Teapot.FillType">
            <summary>
            Gets or sets the type of the fill.
            </summary>
            <value>
            The type of the fill.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Teapot.Material">
            <summary>
            Material to be used when rendering the teapot in lighted mode.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.ArrayExtensions">
            <summary>
            Extensions for Array type.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.ArrayExtensions.Flatten``1(``0[0:,0:,0:])">
            <summary>
            Flattens the specified array.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="array">The array.</param>
            <returns>The flattened array.</returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Grid">
            <summary>
            The Grid design time primitive is displays a grid in the scene.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Primitives.Grid"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Grid.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Grid.CreateDisplayList(SharpGL.OpenGL)">
            <summary>
            Creates the display list. This function draws the
            geometry as well as compiling it.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Grid.displayList">
            <summary>
            The internal display list.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Feedback.Feedback">
            <summary>
            The feedback class handles feedback easily and well. It is 100% dependant on
            OpenGL so use it with care!
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Feedback.Feedback.Begin(SharpGL.OpenGL)">
            <summary>
            This function begins feedback, recording the scene etc. End finishes
            feedback, and parses the feedback buffer.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Feedback.Feedback.End(SharpGL.OpenGL)">
            <summary>
            This function stops the collection of feedback data.
            </summary>
            <returns>The feedback array.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Feedback.Feedback.ParseData(SharpGL.OpenGL,System.Int32)">
            <summary>
            Override this function to do custom functions on the data.
            </summary>
            <param name="values">Number of values.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Effects.Effect">
            <summary>
            An effect is something that can be applied to a scene element which 
            then changes everything in the tree below it. It can be pushed, to apply it
            and popped, to restore OpenGL back to the state without the effect.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.Effect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Effects.Effect"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.Effect.Push(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pushes the effect onto the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.Effect.Pop(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pops the effect off the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.Effect.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.Effect.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Vertex">
            <summary>
            The Vertex class represents a 3D point in space.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Vertex"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.#ctor(SharpGL.SceneGraph.Vertex)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Vertex"/> struct.
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the specified X.
            </summary>
            <param name="X">The X.</param>
            <param name="Y">The Y.</param>
            <param name="Z">The Z.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Addition(SharpGL.SceneGraph.Vertex,SharpGL.SceneGraph.Vertex)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Subtraction(SharpGL.SceneGraph.Vertex,SharpGL.SceneGraph.Vertex)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Multiply(SharpGL.SceneGraph.Vertex,SharpGL.SceneGraph.Vertex)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Multiply(SharpGL.SceneGraph.Vertex,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Multiply(SharpGL.SceneGraph.Vertex,SharpGL.SceneGraph.Matrix)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Multiply(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Vertex)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.op_Division(SharpGL.SceneGraph.Vertex,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.ScalarProduct(SharpGL.SceneGraph.Vertex)">
            <summarY>
            This finds the Scalar Product (Dot Product) of two vectors.
            </summarY>
            <param name="rhs">The right hand side of the equation.</param>
            <returns>A Scalar Representing the Dot-Product.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.VectorProduct(SharpGL.SceneGraph.Vertex)">
            <summarY>
            Find the Vector product (cross product) of two vectors.
            </summarY>
            <param name="rhs">The right hand side of the equation.</param>
            <returns>The Cross Product.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.Magnitude">
            <summarY>
            If You use this as a Vector, then call this function to get the vector
            magnitude.
            </summarY>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.UnitLength">
            <summarY>
            Make this vector unit length.
            </summarY>
        </member>
        <member name="M:SharpGL.SceneGraph.Vertex.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Vertex.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Vertex.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Vertex.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.TextureAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.TextureAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.TextureAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.TextureAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.TextureAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.ListAttributes">
            <summary>
            This class has all the settings you can edit for lists.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ListAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.ListAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ListAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ListAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="F:SharpGL.OpenGLAttributes.ListAttributes.listBase">
            <summary>
            The list base.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ListAttributes.ListBase">
            <summary>
            Gets or sets the list base.
            </summary>
            <value>
            The list base.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Shaders.FragmentShader">
            <summary>
            The Fragment Shader.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Shaders.Shader">
            <summary>
            The Shader base class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.Pop(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pops the effect off the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.Push(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pushes the effect onto the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.DestroyInContext(SharpGL.OpenGL)">
            <summary>
            Destroy in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.SetSource(System.String)">
            <summary>
            Sets the shader source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.LoadSource(System.String)">
            <summary>
            Loads the shader source.
            </summary>
            <param name="path">The path to the shader file.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.Shader.Compile">
            <summary>
            Compiles this instance.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Shaders.Shader.shaderObject">
            <summary>
            The internal shader object.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.Shader.ShaderObject">
            <summary>
            Gets or sets the shader object.
            </summary>
            <value>
            The shader object.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.Shader.CurrentOpenGLContext">
            <summary>
            Gets the current OpenGL that the object exists in context.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.Shader.CompileStatus">
            <summary>
            Gets the compile status.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.Shader.InfoLog">
            <summary>
            Gets the info log.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.Shader.SourceCode">
            <summary>
            Gets the source code.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.FragmentShader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Shaders.FragmentShader"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.FragmentShader.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Folder">
            <summary>
            A Folder is used to organise scene elements.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Folder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Primitives.Folder"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Feedback.Triangulator.ParseData(SharpGL.OpenGL,System.Int32)">
            <summary>
            This takes the feedback data and turns it into triangles.
            </summary>
            <param name="gl"></param>
            <param name="values">The number of triangles.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Evaluators.NurbsSurface">
            <summary>
            A NURBS Surface is a two dimensional non uniform B-Spline.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Evaluators.NurbsBase">
            <summary>
            The NURBS class is the base for NURBS objects, such as curves and surfaces.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Evaluators.Evaluator">
            <summary>
            This is the base class of all evaluators, 1D, 2D etc. It is also the base class
            for the NURBS, as they share alot of common code, such as the VertexGrid.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IHasObjectSpace">
            <summary>
            A SceneElement can implement IHasObjectSpace to allow it to transform
            world space into object space.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IHasObjectSpace.PushObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pushes us into Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IHasObjectSpace.PopObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pops us from Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.IHasObjectSpace.Transformation">
            <summary>
            Gets the transformation that pushes us into object space.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.Evaluator"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator.PushObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pushes us into Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator.PopObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pops us from Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.Evaluator.controlPoints">
            <summary>
            The control points.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.Evaluator.drawPoints">
            <summary>
            Draw points flag.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.Evaluator.drawLines">
            <summary>
            Draw lines flag.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.Evaluator.hasObjectSpaceHelper">
            <summary>
            The IHasObjectSpace helper.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.Evaluator.ControlPoints">
            <summary>
            Gets or sets the control points.
            </summary>
            <value>
            The control points.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.Evaluator.DrawControlPoints">
            <summary>
            Gets or sets a value indicating whether [draw control points].
            </summary>
            <value>
              <c>true</c> if [draw control points]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.Evaluator.DrawControlGrid">
            <summary>
            Gets or sets a value indicating whether [draw control grid].
            </summary>
            <value>
              <c>true</c> if [draw control grid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.Evaluator.Transformation">
            <summary>
            Gets the transformation that pushes us into object space.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.NurbsBase"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsBase.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsBase.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsBase.DestroyInContext(SharpGL.OpenGL)">
            <summary>
            Destroy in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.NurbsBase.nurbsRenderer">
            <summary>
            This is the pointer to the underlying NURBS object.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.NurbsBase.displayMode">
            <summary>
            The display mode.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.NurbsBase.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.NurbsBase.CurrentOpenGLContext">
            <summary>
            Gets the current OpenGL that the object exists in context.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.NurbsSurface"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsSurface.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.NurbsSurface.sKnots">
            <summary>
            The s knots.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.NurbsSurface.tKnots">
            <summary>
            The t knots.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.NurbsSurface.SKnots">
            <summary>
            Gets the knots.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.NurbsSurface.TKnots">
            <summary>
            Gets the knots.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Effects.ArcBallEffect">
            <summary>
            An ArcBall is an effect that pushes an arcball transformation 
            onto the stack.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.ArcBallEffect.Push(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pushes the effect onto the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.ArcBallEffect.Pop(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pops the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Effects.ArcBallEffect.arcBall">
            <summary>
            The arcball.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.ArcBallEffect.ArcBall">
            <summary>
            Gets or sets the linear transformation.
            </summary>
            <value>
            The linear transformation.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IVolumeBound">
            <summary>
            A Scene Element can be volumne bound meaning that it can
            participate in hit testing and various optimisations.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.IVolumeBound.BoundingVolume">
            <summary>
            Gets the bounding volume.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Assets.Asset">
            <summary>
            An Asset is something which is used in the scene, but is not in the scene 
            tree. An example of an asset is a material, which there may be one instance
            of which is shared between many objects.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Asset.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Asset.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Asset.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.TransformAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.TransformAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.TransformAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.TransformAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.TransformAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.TransformAttributes.EnableNormalize">
            <summary>
            Gets or sets the enable normalize.
            </summary>
            <value>
            The enable normalize.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.TransformAttributes.MatrixMode">
            <summary>
            Gets or sets the matrix mode.
            </summary>
            <value>
            The matrix mode.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.EvalAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.EvalAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.EvalAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.EvalAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.EvalAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Raytracing.ScreenPixel">
            <summary>
            A ScreenPixel, password around when raytracing.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Quadrics.DrawStyle">
            <summary>
            The Quadric draw style.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.DrawStyle.Point">
            <summary>
            Points.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.DrawStyle.Line">
            <summary>
            Lines.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.DrawStyle.Silhouette">
            <summary>
            Silhouette.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.DrawStyle.Fill">
            <summary>
            Fill.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Polygon">
            <summary>
            A polygon contains a set of 'faces' which are indexes into a single list
            of vertices. The main thing about polygons is that they are easily editable
            by the user, depending on the Context they're in.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Raytracing.IRayTracable">
            <summary>
            A SceneElement can implement IRayTracable to allow it to
            be raytraced.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Raytracing.IRayTracable.Raytrace(SharpGL.SceneGraph.Raytracing.Ray,SharpGL.SceneGraph.Scene)">
            <summary>
            Raytraces the specified ray. If an intersection is found, it is returned,
            otherwise null is returned.
            </summary>
            <param name="ray">The ray.</param>
            <param name="scene">The scene.</param>
            <returns>The intersection with the object, or null.</returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IFreezable">
            <summary>
            Scene Elements can be marked as Freezeable. If scene objects
            are freezable, they can be frozen, meaning that they are locked.
            Generally this means compiling the object's geometry into
            a display list.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IFreezable.Freeze(SharpGL.OpenGL)">
            <summary>
            Freezes this instance using the provided OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IFreezable.Unfreeze(SharpGL.OpenGL)">
            <summary>
            Unfreezes this instance using the provided OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.IFreezable.IsFrozen">
            <summary>
            Gets a value indicating whether this instance is frozen.
            </summary>
            <value>
              <c>true</c> if this instance is frozen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Primitives.Polygon"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.AddFaceFromVertexData(SharpGL.SceneGraph.Vertex[])">
            <summary>
            This function is cool, just stick in a set of points, it'll add them to the
            array, and create a face. It will take account of duplicate vertices too!
            </summary>
            <param name="vertexData">A set of vertices to make into a face.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Triangulate">
            <summary>
            Triangulate this polygon.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.CreateFromMap(System.String,System.Int32,System.Int32)">
            <summary>
            This creates a polygon from a height map (any picture). Black is low, 
            and the colors are high (the lighter the color, the higher the surface).
            </summary>
            <param name="filename">Path of the image file.</param>
            <param name="xPoints">Number of points along X.</param>
            <param name="yPoints">Number of points along Y.</param>
            <returns>True if sucessful, false otherwise.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.OptimisePolygon">
            <summary>
            This function performs lossless optimisation on the polygon, it should be 
            called when the geometry changes, and the polygon goes into static mode.
            </summary>
            <returns>The amount of optimisation (as a %).</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Validate(System.Boolean)">
            <summary>
            Call this function as soon as you change the polygons geometry, it will
            re-generate normals, etc.
            </summary>
            <param name="regenerateNormals">Regenerate Normals.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.TestIntersection(SharpGL.SceneGraph.Raytracing.Ray)">
            <summary>
            This function tests to see if a ray interesects the polygon.
            </summary>
            <param name="ray">The ray you want to test.</param>
            <returns>
            The distance from the origin of the ray to the intersection, or -1 if there
            is no intersection.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Raytrace(SharpGL.SceneGraph.Raytracing.Ray,SharpGL.SceneGraph.Scene)">
            <summary>
            Raytraces the specified ray. If an intersection is found, it is returned,
            otherwise null is returned.
            </summary>
            <param name="ray">The ray.</param>
            <param name="scene">The scene.</param>
            <returns>
            The intersection with the object, or null.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Subdivide">
            <summary>
            This function subdivides the faces of this polygon.
            </summary>
            <param name="smooth">If set to true the faces will be smoothed.</param>
            <returns>The number of faces in the new subdivided polygon.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Freeze(SharpGL.OpenGL)">
            <summary>
            Freezes this instance using the provided OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.Unfreeze(SharpGL.OpenGL)">
            <summary>
            Unfreezes this instance using the provided OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.PushObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pushes us into Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.PopObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pops us from Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Polygon.DeepClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.hasObjectSpaceHelper">
            <summary>
            The IHasObjectSpace helper.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.freezableHelper">
            <summary>
            The freezable helper.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.faces">
            <summary>
            The faces that make up the polygon.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.vertices">
            <summary>
            The vertices that make up the polygon.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.uvs">
            <summary>
            The UV coordinates (texture coodinates) for the polygon.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.normals">
            <summary>
            The normals of the polygon object.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.drawNormals">
            <summary>
            Should the normals be drawn?
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Polygon.boundingVolumeHelper">
            <summary>
            The bounding volume helper - used to ease implementation of IBoundVolume.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.Faces">
            <summary>
            Gets or sets the faces.
            </summary>
            <value>
            The faces.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
            <value>
            The vertices.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.UVs">
            <summary>
            Gets or sets the U vs.
            </summary>
            <value>
            The U vs.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.Normals">
            <summary>
            Gets or sets the normals.
            </summary>
            <value>
            The normals.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.DrawNormals">
            <summary>
            Gets or sets a value indicating whether [draw normals].
            </summary>
            <value>
              <c>true</c> if [draw normals]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.Transformation">
            <summary>
            Gets the transformation that pushes us into object space.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.BoundingVolume">
            <summary>
            Gets the bounding volume.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.IsFrozen">
            <summary>
            Gets a value indicating whether this instance is frozen.
            </summary>
            <value>
              <c>true</c> if this instance is frozen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Polygon.Material">
            <summary>
            Material to be used when rendering the polygon in lighted mode.
            This material may be overriden on a per-face basis.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Transformations.LinearTransformationOrder">
            <summary>
            This enumeration describes the linear transformation order.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformationOrder.TranslateRotateScale">
            <summary>
            Translate > Rotate > Scale
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformationOrder.RotateTranslateScale">
            <summary>
            Rotate > Translate > Scale
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Transformations.LinearTransformation">
            <summary>
            The LinearTransformation class represents a linear transformation, such
            as a transformation that moves us from world space into object space.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Transformations.Transformation">
            <summary>
            Base class for transformations.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Transformations.Transformation.Transform(SharpGL.OpenGL)">
            <summary>
            Performs the transformation on the current matrix.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Transformations.LinearTransformation.Transform(SharpGL.OpenGL)">
            <summary>
            Performs the transformation on the current matrix.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Transformations.LinearTransformation.DeepClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.translateX">
            <summary>
            X Component of the Translation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.translateY">
            <summary>
            Y Component of the Translation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.translateZ">
            <summary>
            Z Component of the Translation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.rotateX">
            <summary>
            X Component of the Rotation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.rotateY">
            <summary>
            Y Component of the Rotation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.rotateZ">
            <summary>
            Z Component of the Rotation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.scaleX">
            <summary>
            X Component of the Scale.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.scaleY">
            <summary>
            Y Component of the Scale.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.scaleZ">
            <summary>
            Z Component of the Scale.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Transformations.LinearTransformation.transformationOrder">
            <summary>
            The order of the linear transformation.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.TranslationVertex">
            <summary>
            Gets the translation vertex.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.TranslateX">
            <summary>
            Gets or sets the x component of the translation.
            </summary>
            <value>
            The x component of the translation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.TranslateY">
            <summary>
            Gets or sets the y component of the translation.
            </summary>
            <value>
            The y component of the translation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.TranslateZ">
            <summary>
            Gets or sets the z component of the translation.
            </summary>
            <value>
            The z component of the translation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.RotateX">
            <summary>
            Gets or sets the x component of the rotation.
            </summary>
            <value>
            The x component of the rotation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.RotateY">
            <summary>
            Gets or sets the y component of the rotation.
            </summary>
            <value>
            The y component of the rotation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.RotateZ">
            <summary>
            Gets or sets the z component of the rotation.
            </summary>
            <value>
            The z component of the rotation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.ScaleX">
            <summary>
            Gets or sets the x component of the scale.
            </summary>
            <value>
            The x component of the scale.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.ScaleY">
            <summary>
            Gets or sets the y component of the scale.
            </summary>
            <value>
            The y component of the scale.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.ScaleZ">
            <summary>
            Gets or sets the z component of the scale.
            </summary>
            <value>
            The z component of the scale.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Transformations.LinearTransformation.TransformationOrder">
            <summary>
            Gets or sets the transformation order.
            </summary>
            <value>
            The transformation order.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Index">
            <summary>
            An index into a set of arrays.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Index.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Index"/> class.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Index.vertex">
            <summary>
            This is the vertex in the polygon vertex array that the index refers to.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Index.uv">
            <summary>
            This is the material coord in the polygon UV array that the index refers to.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Index.normal">
            <summary>
            This is the index into the normal array for this vertex. A value of -1 will
            generate a normal on the fly.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Index.Vertex">
            <summary>
            Gets or sets the vertex.
            </summary>
            <value>
            The vertex.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Index.UV">
            <summary>
            Gets or sets the UV.
            </summary>
            <value>
            The UV.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Index.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
            <value>
            The normal.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.ParticleSystems.ParticleSystem">
            <summary>
            A particle system is, you guessed it, just a collection of particles.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.ParticleSystems.ParticleSystem"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.Initialise(System.Int32)">
            <summary>
            This function should create and initialise 'count' particles of the correct
            type. This is done automatically by default, only override if you want
            to change the standard behaviour.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.Tick">
            <summary>
            This function ticks the particle system.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.PushObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pushes us into Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.PopObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pops us from Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.hasObjectSpaceHelper">
            <summary>
            The IHasObjectSpace helper.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.ParticleSystems.ParticleSystem.Transformation">
            <summary>
            Gets the transformation that pushes us into object space.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.FogAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.FogAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.FogAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.FogAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.FogAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Shaders.VertexShader">
            <summary>
            The Vertex Shader object.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.VertexShader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Shaders.VertexShader"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.VertexShader.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Raytracing.Ray">
            <summary>
            A Ray.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Ray.light">
            <summary>
            The light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Ray.origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Ray.direction">
            <summary>
            The direction.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Helpers.BoundingVolumeHelper">
            <summary>
            The bounding helper.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Helpers.BoundingVolumeHelper.boundingVolume">
            <summary>
            The bounding volume.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Helpers.BoundingVolumeHelper.BoundingVolume">
            <summary>
            Gets the bounding volume.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Cameras.LookAtCamera">
            <summary>
            The LookAt camera is a camera that does a 'look at' transformation.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Cameras.PerspectiveCamera">
            <summary>
            This camera contains the data needed to perform a Perspective transformation
            to the projection matrix.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Cameras.Camera">
            <summary>
            The camera class is a base for a set of derived classes for manipulating the
            projection matrix.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.Camera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Cameras.Camera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.Camera.Project(SharpGL.OpenGL)">
            <summary>
            This function projects through the camera, to OpenGL, ie. it 
            creates a projection matrix.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.Camera.TransformProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            This function is for when you simply want to call only the functions that
            would transform the projection matrix. Warning, it won't load the identity
            first, and it won't set the current matrix to projection, it's really for
            people who need to use it for their own projection functions (e.g Picking
            uses it to create a composite 'Pick' projection).
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.Camera.position">
            <summary>
            The camera position.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.Camera.projectionMatrix">
            <summary>
            Every time a camera is used to project, the projection matrix calculated 
            and stored here.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.Camera.aspectRatio">
            <summary>
            The screen aspect ratio.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.Camera.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.Camera.AspectRatio">
            <summary>
            Gets or sets the aspect.
            </summary>
            <value>
            The aspect.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.PerspectiveCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Cameras.PerspectiveCamera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.PerspectiveCamera.TransformProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            This is the class' main function, to override this function and perform a 
            perspective transformation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.PerspectiveCamera.fieldOfView">
            <summary>
            The field of view. 
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.PerspectiveCamera.near">
            <summary>
            The near clip.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.PerspectiveCamera.far">
            <summary>
            The far flip.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.PerspectiveCamera.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <value>
            The field of view.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.PerspectiveCamera.Near">
            <summary>
            Gets or sets the near.
            </summary>
            <value>
            The near.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.PerspectiveCamera.Far">
            <summary>
            Gets or sets the far.
            </summary>
            <value>
            The far.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.LookAtCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Cameras.LookAtCamera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.LookAtCamera.TransformProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            This is the class' main function, to override this function and perform a 
            perspective transformation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.LookAtCamera.target">
            <summary>
            This is the point in the scene that the camera is pointed at.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.LookAtCamera.upVector">
            <summary>
            This is a vector that describes the 'up' direction (normally 0, 0, 1).
            Use this to tilt the camera.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.LookAtCamera.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.LookAtCamera.UpVector">
            <summary>
            Gets or sets up vector.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Cube">
            <summary>
            A simple cube polygon.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Cube.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:PolyCubegon"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Cube.CreateCubeGeometry">
            <summary>
            This function makes a simple cube shape.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Raytracing.Intersection">
            <summary>
            An intersection.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Intersection.intersected">
            <summary>
            Is it intersected?
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Intersection.normal">
            <summary>
            The normal.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Intersection.point">
            <summary>
            The point.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Raytracing.Intersection.closeness">
            <summary>
            The closeness.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect">
            <summary>
            The OpenGLAttributes are an effect that can set 
            any OpenGL attributes.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.Push(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pushes the effect onto the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.Pop(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pops the effect off the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.HintAttributes">
            <summary>
            Gets or sets the hint attributes.
            </summary>
            <value>
            The hint attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.ListAttributes">
            <summary>
            Gets or sets the list attributes.
            </summary>
            <value>
            The list attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.PixelModeAttributes">
            <summary>
            Gets or sets the pixel mode attributes.
            </summary>
            <value>
            The pixel mode attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.PolygonStippleAttributes">
            <summary>
            Gets or sets the polygon stipple attributes.
            </summary>
            <value>
            The polygon stipple attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.ScissorAttributes">
            <summary>
            Gets or sets the scissor attributes.
            </summary>
            <value>
            The scissor attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.StencilBufferAttributes">
            <summary>
            Gets or sets the stencil buffer attributes.
            </summary>
            <value>
            The stencil buffer attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.TextureAttributes">
            <summary>
            Gets or sets the texture attributes.
            </summary>
            <value>
            The texture attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.TransformAttributes">
            <summary>
            Gets or sets the transform attributes.
            </summary>
            <value>
            The transform attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.ViewportAttributes">
            <summary>
            Gets or sets the viewport attributes.
            </summary>
            <value>
            The viewport attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.EvalAttributes">
            <summary>
            Gets or sets the eval attributes.
            </summary>
            <value>
            The eval attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.AccumBufferAttributes">
            <summary>
            Gets or sets the accum buffer attributes.
            </summary>
            <value>
            The accum buffer attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.ColorBufferAttributes">
            <summary>
            Gets or sets the color buffer attributes.
            </summary>
            <value>
            The color buffer attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.CurrentAttributes">
            <summary>
            Gets or sets the current attributes.
            </summary>
            <value>
            The current buffer.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.DepthBufferAttributes">
            <summary>
            Gets or sets the depth buffer attributes.
            </summary>
            <value>
            The depth buffer attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.EnableAttributes">
            <summary>
            Gets or sets the enable attributes.
            </summary>
            <value>
            The enable attributes.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.FogAttributes">
            <summary>
            Gets the fog attributes.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.LightingAttributes">
            <summary>
            Gets the lighting attributes.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.LineAttributes">
            <summary>
            Gets the line attributes.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.PointAttributes">
            <summary>
            Gets the point attributes.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.OpenGLAttributesEffect.PolygonAttributes">
            <summary>
            Gets the polygon attributes.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.VertexGrid">
            <summary>
            This class represent's a grid of points, just like you'd get on a NURBS
            surface, or a patch.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.VertexGrid.Draw(SharpGL.OpenGL,System.Boolean,System.Boolean)">
            <summary>
            Use this to draw the vertex grid.
            </summary>
            <param name="gl">OpenGL object.</param>
            <param name="points">Draw each individual vertex (with selection names).</param>
            <param name="lines">Draw the lines connecting the points.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.VertexGrid.ToFloatArray">
            <summary>
            This function returns all of the control points as a float array, which 
            is in the format [0] = vertex 1 X, [1] = vertex 1 Y, [2] = vertex 1 Z, 
            [3] = vertex 2 X etc etc... This array is suitable for OpenGL functions
            for evaluators and NURBS.
            </summary>
            <returns>An array of floats.</returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.SceneContainer">
            <summary>
            The Scene Container is the top-level object in a scene graph.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.SceneContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Core.SceneContainer"/> class.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Core.SceneContainer.ParentScene">
            <summary>
            Gets or sets the parent scene.
            </summary>
            <value>
            The parent scene.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Cameras.FrustumCamera">
            <summary>
            This camera contains the data needed to perform a Frustum transformation
            to the projection matrix.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.FrustumCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Cameras.FrustumCamera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.FrustumCamera.TransformProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            This is the main function of the camera, perform a Frustrum (in this case)
            transformation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.FrustumCamera.left">
            <summary>
            The left pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.FrustumCamera.right">
            <summary>
            The right pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.FrustumCamera.top">
            <summary>
            The top pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.FrustumCamera.bottom">
            <summary>
            The bottom pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.FrustumCamera.near">
            <summary>
            The near pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.FrustumCamera.far">
            <summary>
            The far pos.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.FrustumCamera.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.FrustumCamera.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.FrustumCamera.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.FrustumCamera.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.FrustumCamera.Near">
            <summary>
            Gets or sets the near.
            </summary>
            <value>
            The near.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.FrustumCamera.Far">
            <summary>
            Gets or sets the far.
            </summary>
            <value>
            The far.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.DepthBufferAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.DepthBufferAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.DepthBufferAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.DepthBufferAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.DepthBufferAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.DepthBufferAttributes.EnableDepthWritemask">
            <summary>
            Gets or sets the enable depth writemask.
            </summary>
            <value>
            The enable depth writemask.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.DepthBufferAttributes.DepthClearValue">
            <summary>
            Gets or sets the depth clear value.
            </summary>
            <value>
            The depth clear value.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.DepthBufferAttributes.DepthFunction">
            <summary>
            Gets or sets the depth function.
            </summary>
            <value>
            The depth function.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.DepthBufferAttributes.EnableDepthTest">
            <summary>
            Gets or sets the enable depth test.
            </summary>
            <value>
            The enable depth test.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Feedback.Polygonator">
            <summary>
            Pass this class any SceneObject and it'll send you back a polygon.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Feedback.Polygonator.CreatePolygon(SharpGL.OpenGL,SharpGL.SceneGraph.Core.IRenderable,SharpGL.SceneGraph.Cameras.Camera)">
            <summary>
            This is the main function of the class, it'll create a triangulated polygon
            from and SceneObject.
            </summary>
            <param name="gl">The gl.</param>
            <param name="sourceObject">The object to convert.</param>
            <param name="guarenteedView">A camera that can see the whole object.</param>
            <returns>
            A polygon created from 'sourceObject'.
            </returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Plane">
            <summary>
            A plane.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Plane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Plane"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Plane.ClassifyPoint(SharpGL.SceneGraph.Vertex)">
            <summary>
            This finds out if a point is in front of, behind, or on this plane.
            </summary>
            <param name="point">The point to classify.</param>
            <returns>
            Less than 0 if behind, 0 if on, Greater than 0 if in front.
            </returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Plane.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Plane.normal">
            <summary>
            The normal.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Plane.equation">
            <summary>
            The equation.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.IBindable">
            <summary>
            An object that is Bindable is able to set itself into
            the current OpenGL instance. This can be lights, materials,
            attributes and so on.
            Bindable objects must be able to be used without interfering
            with later rendering, so as well as simply being bound directly, 
            they must be able to be pushed and popped.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IBindable.Push(SharpGL.OpenGL)">
            <summary>
            Pushes this object into the provided OpenGL instance.
            This will generally push elements of the attribute stack
            and then set current values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IBindable.Pop(SharpGL.OpenGL)">
            <summary>
            Pops this object from the provided OpenGL instance.
            This will generally pop elements of the attribute stack,
            restoring previous attribute values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.IBindable.Bind(SharpGL.OpenGL)">
            <summary>
            Bind to the specified OpenGL instance.
            Remember, this will not push or pop the attribute
            stack so will affect ALL subsequent rendering.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Face">
            <summary>
            A Face is a set of indices to vertices.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Face.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Face"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Face.GetPlaneEquation(SharpGL.SceneGraph.Primitives.Polygon)">
            <summary>
            Returns the plane equation (ax + by + cz + d = 0) of the face.
            </summary>
            <param name="parent">The parent polygon.</param>
            <returns>An array of four coefficients a,b,c,d.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Face.GetSurfaceNormal(SharpGL.SceneGraph.Primitives.Polygon)">
            <summary>
            Gets the surface normal.
            </summary>
            <param name="parent">The parent.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Face.Reorder(SharpGL.SceneGraph.Primitives.Polygon)">
            <summary>
            This function reverses the order of the indices, i.e changes which direction
            this face faces in.
            </summary>
            <param name="parent">The parent polygon.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Face.GenerateNormals(SharpGL.SceneGraph.Primitives.Polygon)">
            <summary>
            This function generates normals for every vertex.
            </summary>
            <param name="parent">The parent polygon.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Face.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Face.indices">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Face.neighbourIndices">
            <summary>
            The neighbor indices.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Face.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Face.Indices">
            <summary>
            Gets or sets the indices.
            </summary>
            <value>
            The indices.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Face.NeighbourIndices">
            <summary>
            Gets or sets the neighbour indicies.
            </summary>
            <value>
            The neighbour indicies.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Face.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.PolygonStippleAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PolygonStippleAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.PolygonStippleAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PolygonStippleAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PolygonStippleAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonStippleAttributes.PolygonStipple">
            <summary>
            Gets or sets the polygon stipple.
            </summary>
            <value>
            The polygon stipple.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Quadrics.Cylinder">
            <summary>
            The Cylinder class wraps the cylinder quadric.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Quadrics.Quadric">
            <summary>
            Quadric is the base class for all SharpGL quadric objects.
            It can be interacted with and it can be rendered.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Quadric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Quadrics.Quadric"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Quadric.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Quadric.DestroyInContext(SharpGL.OpenGL)">
            <summary>
            Destroy in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Quadric.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Quadric.PushObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pushes us into Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Quadric.PopObjectSpace(SharpGL.OpenGL)">
            <summary>
            Pops us from Object Space using the transformation into the specified OpenGL instance.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Quadric.glQuadric">
            <summary>
            This is the pointer to the opengl quadric object.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Quadric.drawStyle">
            <summary>
            The draw style, can be filled, line, silouhette or points.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Quadric.hasObjectSpaceHelper">
            <summary>
            The IHasObjectSpace helper.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.QuadricDrawStyle">
            <summary>
            Gets or sets the quadric draw style.
            </summary>
            <value>
            The quadric draw style.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.NormalOrientation">
            <summary>
            Gets or sets the normal orientation.
            </summary>
            <value>
            The normal orientation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.NormalGeneration">
            <summary>
            Gets or sets the normal generation.
            </summary>
            <value>
            The normal generation.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.TextureCoords">
            <summary>
            Gets or sets a value indicating whether [texture coords].
            </summary>
            <value>
              <c>true</c> if [texture coords]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.Transformation">
            <summary>
            Gets the transformation that pushes us into object space.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.CurrentOpenGLContext">
            <summary>
            Gets the current OpenGL that the object exists in context.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Quadric.Material">
            <summary>
            Material to be used when rendering the quadric in lighted mode.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Cylinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Quadrics.Cylinder"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Cylinder.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Cylinder.baseRadius">
            <summary>
            Sphere data.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Cylinder.topRadius">
            <summary>
            Top radius.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Cylinder.height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Cylinder.slices">
            <summary>
            The slices.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Cylinder.stacks">
            <summary>
            The stacks.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Cylinder.boundingVolumeHelper">
            <summary>
            Helps us implement IVolumeBound.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Cylinder.BaseRadius">
            <summary>
            Gets or sets the base radius.
            </summary>
            <value>
            The base radius.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Cylinder.TopRadius">
            <summary>
            Gets or sets the top radius.
            </summary>
            <value>
            The top radius.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Cylinder.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Cylinder.Slices">
            <summary>
            Gets or sets the slices.
            </summary>
            <value>
            The slices.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Cylinder.Stacks">
            <summary>
            Gets or sets the stacks.
            </summary>
            <value>
            The stacks.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Cylinder.BoundingVolume">
            <summary>
            Gets the bounding volume.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.GLColor">
            <summary>
            This class provides a means of working with standard and opengl colours.
            Use the ColorNet and ColorGL properties to set or access the colour in either
            mode.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.GLColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.GLColor"/> class.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.GLColor.ColorNET">
            <summary>
            This property allows you to access the color as if it was a .NET
            color.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.GLColor.ColorGL">
            <summary>
            This property accesses the color as an opengl value.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.GLColor.R">
            <summary>
            Gets or sets the R.
            </summary>
            <value>
            The R.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.GLColor.G">
            <summary>
            Gets or sets the G.
            </summary>
            <value>
            The G.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.GLColor.B">
            <summary>
            Gets or sets the B.
            </summary>
            <value>
            The B.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.GLColor.A">
            <summary>
            Gets or sets the A.
            </summary>
            <value>
            The A.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.LightingAttributes">
            <summary>
            This class has the light settings.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.LightingAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.LightingAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.LightingAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.LightingAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Shaders.ShaderProgram">
            <summary>
            The Shader base class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.Pop(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pops the effect off the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.Push(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pushes the effect onto the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.DestroyInContext(SharpGL.OpenGL)">
            <summary>
            Destroy in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.AttachShader(SharpGL.SceneGraph.Shaders.Shader)">
            <summary>
            Attaches a shader.
            </summary>
            <param name="shader">The shader.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.DetachShader(SharpGL.SceneGraph.Shaders.Shader)">
            <summary>
            Detaches the shader.
            </summary>
            <param name="shader">The shader.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.Link">
            <summary>
            Links this instance.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.GetUniformLocation(System.String)">
            <summary>
            Gets the uniform location.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Shaders.ShaderProgram.SetFullShaderSource(System.String)">
            <summary>
            Sets the full shader source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SharpGL.SceneGraph.Shaders.ShaderProgram.attachedShaders" -->
        <member name="P:SharpGL.SceneGraph.Shaders.ShaderProgram.ProgramObject">
            <summary>
            Gets or sets the shader object.
            </summary>
            <value>
            The shader object.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.ShaderProgram.CurrentOpenGLContext">
            <summary>
            Gets the current OpenGL that the object exists in context.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.ShaderProgram.AttachedShaders">
            <summary>
            Gets the attached shaders.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.ShaderProgram.LinkStatus">
            <summary>
            Gets the compile status.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Shaders.ShaderProgram.InfoLog">
            <summary>
            Gets the info log.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Axies">
            <summary>
            The axies objects are design time rendered primitives
            that show an RGB axies at the origin of the scene.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Axies.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Primitives.Axies"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Axies.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Axies.CreateDisplayList(SharpGL.OpenGL)">
            <summary>
            Creates the display list. This function draws the
            geometry as well as compiling it.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Axies.displayList">
            <summary>
            The internal display list.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Helpers.SceneHelper">
            <summary>
            The scene helper can be used to create scene presets, 
            such as designer, application, etc
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.SceneHelper.InitialiseModelingScene(SharpGL.SceneGraph.Scene)">
            <summary>
            Initialises a modeling scene. A modeling scene has:
             - A 'Look At' camera targetting the centre of the scene
             - Three gentle omnidirectional lights
             - A design time grid and axis.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.Evaluators.Evaluator1D">
            <summary>
            This is a 1D evaluator, i.e a bezier curve.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator1D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.Evaluator1D"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator1D.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.Evaluator1D"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator1D.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.Evaluator1D.segments">
            <summary>
            The segments.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.Evaluator1D.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Effects.LinearTransformationEffect">
            <summary>
            A Linear Transformation is an effect that pushes a linear transformation (translate, scale, rotate)
            onto the stack.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.LinearTransformationEffect.Push(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pushes the effect onto the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Effects.LinearTransformationEffect.Pop(SharpGL.OpenGL,SharpGL.SceneGraph.Core.SceneElement)">
            <summary>
            Pops the specified parent element.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Effects.LinearTransformationEffect.linearTransformation">
            <summary>
            The linear transformation.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Effects.LinearTransformationEffect.LinearTransformation">
            <summary>
            Gets or sets the linear transformation.
            </summary>
            <value>
            The linear transformation.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.DisplayList">
            <summary>
            The display list class basicly wraps an OpenGL display list, making them easier
            to manage. Remember this class is completely OpenGL dependant. In time this class
            will derive from the IOpenGLDependant interface.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.DisplayList.Generate(SharpGL.OpenGL)">
            <summary>
            This function generates the display list. You must call it before you call
            anything else!
            </summary>
            <param name="gl">OpenGL</param>
        </member>
        <member name="M:SharpGL.SceneGraph.DisplayList.New(SharpGL.OpenGL,SharpGL.SceneGraph.DisplayList.DisplayListMode)">
            <summary>
            This function makes the display list.
            </summary>
            <param name="gl">OpenGL</param>
            <param name="mode">The mode, compile or compile and execute.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.DisplayList.End(SharpGL.OpenGL)">
            <summary>
            This function ends the compilation of a list.
            </summary>
            <param name="gl"></param>
        </member>
        <member name="T:SharpGL.SceneGraph.Cameras.OrthographicCamera">
            <summary>
            This camera contains the data needed to perform an orthographic transformation
            to the projection matrix.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.OrthographicCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Cameras.OrthographicCamera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.OrthographicCamera.TransformProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            This is the main function of the class, to perform a specialised projection
            in this case, an orthographic one.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.OrthographicCamera.left">
            <summary>
            The left pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.OrthographicCamera.right">
            <summary>
            The right pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.OrthographicCamera.top">
            <summary>
            The top pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.OrthographicCamera.bottom">
            <summary>
            The bottom pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.OrthographicCamera.near">
            <summary>
            The near pos.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.OrthographicCamera.far">
            <summary>
            The far pos.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.OrthographicCamera.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.OrthographicCamera.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.OrthographicCamera.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.OrthographicCamera.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.OrthographicCamera.Near">
            <summary>
            Gets or sets the near.
            </summary>
            <value>
            The near.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.OrthographicCamera.Far">
            <summary>
            Gets or sets the far.
            </summary>
            <value>
            The far.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Assets.Texture">
            <summary>
            A Texture object is simply an array of bytes. It has OpenGL functions, but is
            not limited to OpenGL, so DirectX or custom library functions could be later added.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Assets.Texture"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Push(SharpGL.OpenGL)">
            <summary>
            Pushes this object into the provided OpenGL instance.
            This will generally push elements of the attribute stack
            and then set current values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Pop(SharpGL.OpenGL)">
            <summary>
            Pops this object from the provided OpenGL instance.
            This will generally pop elements of the attribute stack,
            restoring previous attribute values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Bind(SharpGL.OpenGL)">
            <summary>
            Bind to the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Create(SharpGL.OpenGL)">
            <summary>
            This function creates the underlying OpenGL object.
            </summary>
            <param name="gl"></param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Create(SharpGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            This function creates the texture from an image.
            </summary>
            <param name="gl">The OpenGL object.</param>
            <param name="image">The image.</param>
            <returns>True if the texture was successfully loaded.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Create(SharpGL.OpenGL,System.String)">
            <summary>
            This function creates the texture from an image file.
            </summary>
            <param name="gl">The OpenGL object.</param>
            <param name="path">The path to the image file.</param>
            <returns>True if the texture was successfully loaded.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.Destroy(SharpGL.OpenGL)">
            <summary>
            This function destroys the OpenGL object that is a representation of this texture.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Texture.ToBitmap">
            <summary>
            This function (attempts) to make a bitmap from the raw data. The fact that
            the byte array is a managed type makes it slightly more complicated.
            </summary>
            <returns>The texture object as a Bitmap.</returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Texture.pixelData">
            <summary>
            This is an array of bytes (r, g, b, a) that represent the pixels in this
            texture object.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Texture.width">
            <summary>
            The width of the texture image.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Texture.height">
            <summary>
            The height of the texture image.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Texture.glTextureArray">
            <summary>
            This is for OpenGL textures, it is the unique ID for the OpenGL texture.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Texture.TextureName">
            <summary>
            Gets the name of the texture.
            </summary>
            <value>
            The name of the texture.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.AccumBufferAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.AccumBufferAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.AccumBufferAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.AccumBufferAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.AccumBufferAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Evaluators.Evaluator2D">
            <summary>
            This is a 2D evaluator, i.e a bezier patch.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.Evaluator2D"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.Evaluator2D"/> class.
            </summary>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.Evaluator2D.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.Evaluator2D.segments">
            <summary>
            The segments.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.Evaluator2D.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.RenderMode">
            <summary>
            The RenderMode enumeration is used to identify what kind
            of rendering is occuring.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Core.RenderMode.Design">
            <summary>
            We are designing.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Core.RenderMode.HitTest">
            <summary>
            We are rendering for a hit test.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Core.RenderMode.Render">
            <summary>
            We are rendering.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Core.ArcBall">
            <summary>
            The ArcBall camera supports arcball projection, making it ideal for use with a mouse.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.ArcBall.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:PerspectiveCamera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.ArcBall.TransformMatrix(SharpGL.OpenGL)">
            <summary>
            This is the class' main function, to override this function and perform a 
            perspective transformation.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.OpenGLEventArgs">
            <summary>
            The OpenGLEventArgs class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLEventArgs.#ctor(SharpGL.OpenGL)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.OpenGLEventArgs"/> class.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.OpenGLEventArgs.gl">
            <summary>
            The OpenGL instance.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.OpenGLEventArgs.OpenGL">
            <summary>
            Gets or sets the open GL.
            </summary>
            <value>The open GL.</value>
        </member>
        <member name="T:SharpGL.SceneGraph.OpenGLEventHandler">
            <summary>
            The OpenGL Event Handler delegate.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Evaluators.NurbsCurve">
            <summary>
            A NURBS Curve is a one dimensional non uniform B-Spline.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Evaluators.NurbsCurve"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Evaluators.NurbsCurve.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Evaluators.NurbsCurve.knots">
            <summary>
            The knots.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Evaluators.NurbsCurve.Knots">
            <summary>
            Gets the knots.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.PixelModeAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PixelModeAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.PixelModeAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PixelModeAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PixelModeAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.MapColor">
            <summary>
            Gets or sets the color of the map.
            </summary>
            <value>
            The color of the map.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.MapStencil">
            <summary>
            Gets or sets the map stencil.
            </summary>
            <value>
            The map stencil.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.IndexShift">
            <summary>
            Gets or sets the index shift.
            </summary>
            <value>
            The index shift.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.IndexOffset">
            <summary>
            Gets or sets the index offset.
            </summary>
            <value>
            The index offset.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.RedScale">
            <summary>
            Gets or sets the red scale.
            </summary>
            <value>
            The red scale.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.GreenScale">
            <summary>
            Gets or sets the green scale.
            </summary>
            <value>
            The green scale.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.BlueScale">
            <summary>
            Gets or sets the blue scale.
            </summary>
            <value>
            The blue scale.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.AlphaScale">
            <summary>
            Gets or sets the alpha scale.
            </summary>
            <value>
            The alpha scale.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.DepthScale">
            <summary>
            Gets or sets the depth scale.
            </summary>
            <value>
            The depth scale.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.RedBias">
            <summary>
            Gets or sets the red bias.
            </summary>
            <value>
            The red bias.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.GreenBias">
            <summary>
            Gets or sets the green bias.
            </summary>
            <value>
            The green bias.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.BlueBias">
            <summary>
            Gets or sets the blue bias.
            </summary>
            <value>
            The blue bias.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.AlphaBias">
            <summary>
            Gets or sets the alpha bias.
            </summary>
            <value>
            The alpha bias.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PixelModeAttributes.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>
            The depth bias.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.ColorBufferAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ColorBufferAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.ColorBufferAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ColorBufferAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ColorBufferAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.EnableAlphaTest">
            <summary>
            Gets or sets the enable alpha test.
            </summary>
            <value>
            The enable alpha test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.AlphaTestFunction">
            <summary>
            Gets or sets the alpha test function.
            </summary>
            <value>
            The alpha test function.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.AlphaTestReferenceValue">
            <summary>
            Gets or sets the alpha test reference value.
            </summary>
            <value>
            The alpha test reference value.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.EnableBlend">
            <summary>
            Gets or sets the enable blend.
            </summary>
            <value>
            The enable blend.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.BlendingSourceFactor">
            <summary>
            Gets or sets the blending source factor.
            </summary>
            <value>
            The blending source factor.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.BlendingDestinationFactor">
            <summary>
            Gets or sets the blending destination factor.
            </summary>
            <value>
            The blending destination factor.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.EnableDither">
            <summary>
            Gets or sets the enable dither.
            </summary>
            <value>
            The enable dither.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.DrawBufferMode">
            <summary>
            Gets or sets the draw buffer mode.
            </summary>
            <value>
            The draw buffer mode.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.EnableLogicOp">
            <summary>
            Gets or sets the enable logic op.
            </summary>
            <value>
            The enable logic op.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.LogicOp">
            <summary>
            Gets or sets the logic op.
            </summary>
            <value>
            The logic op.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.ColorModeClearColor">
            <summary>
            Gets or sets the color of the color mode clear.
            </summary>
            <value>
            The color of the color mode clear.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.IndexModeClearColor">
            <summary>
            Gets or sets the color of the index mode clear.
            </summary>
            <value>
            The color of the index mode clear.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.ColorModeWriteMask">
            <summary>
            Gets or sets the color mode write mask.
            </summary>
            <value>
            The color mode write mask.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ColorBufferAttributes.IndexModeWriteMask">
            <summary>
            Gets or sets the index mode write mask.
            </summary>
            <value>
            The index mode write mask.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Assets.Material">
            <summary>
            A material object is defined in mathematical terms, i.e it's not exclusivly 
            for OpenGL. This means later on, DirectX or custom library functions could
            be added.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Assets.Material"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Material.CalculateLighting(SharpGL.SceneGraph.Lighting.Light,System.Single)">
            <summary>
            Calculates the lighting.
            </summary>
            <param name="light">The light.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Material.Push(SharpGL.OpenGL)">
            <summary>
            Pushes this object into the provided OpenGL instance.
            This will generally push elements of the attribute stack
            and then set current values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Material.Pop(SharpGL.OpenGL)">
            <summary>
            Pops this object from the provided OpenGL instance.
            This will generally pop elements of the attribute stack,
            restoring previous attribute values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Assets.Material.Bind(SharpGL.OpenGL)">
            <summary>
            Bind to the specified OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Material.ambient">
            <summary>
            Ambient color.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Material.diffuse">
            <summary>
            Diffuse color.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Material.specular">
            <summary>
            Specular color.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Material.emission">
            <summary>
            Emission.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Material.shininess">
            <summary>
            Shininess.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Assets.Material.texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Material.Ambient">
            <summary>
            Gets or sets the ambient.
            </summary>
            <value>
            The ambient.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Material.Diffuse">
            <summary>
            Gets or sets the diffuse.
            </summary>
            <value>
            The diffuse.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Material.Specular">
            <summary>
            Gets or sets the specular.
            </summary>
            <value>
            The specular.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Material.Emission">
            <summary>
            Gets or sets the emission.
            </summary>
            <value>
            The emission.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Material.Shininess">
            <summary>
            Gets or sets the shininess.
            </summary>
            <value>
            The shininess.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Assets.Material.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.PointAttributes">
            <summary>
            The point settings.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PointAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.PointAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PointAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PointAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="F:SharpGL.OpenGLAttributes.PointAttributes.size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLAttributes.PointAttributes.smooth">
            <summary>
            The smooth flag.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PointAttributes.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PointAttributes.Smooth">
            <summary>
            Gets or sets the smooth.
            </summary>
            <value>
            The smooth.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Raytracing.RayTracer">
            <summary>
            The Ray Tracer is an engine that renders a scene using the raytracing mechanism.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Raytracing.RayTracer.Render(SharpGL.SceneGraph.Scene,SharpGL.SceneGraph.Cameras.Camera)">
            <summary>
            Renders the specified scene.
            </summary>
            <param name="scene">The scene.</param>
            <param name="camera">The camera.</param>
            <returns>
            The scene rendered with raytracing.
            </returns>
        </member>
        <member name="T:SharpGL.SceneGraph.Quadrics.Sphere">
            <summary>
            The Sphere class wraps the sphere quadric.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Sphere.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Quadrics.Sphere"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Sphere.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Sphere.radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Sphere.slices">
            <summary>
            The slices.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Sphere.stacks">
            <summary>
            The stacks.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Sphere.boundingVolumeHelper">
            <summary>
            The bounding volume helper, used to aid implementation of IVolumeBound.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Sphere.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Sphere.Slices">
            <summary>
            Gets or sets the slices.
            </summary>
            <value>
            The slices.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Sphere.Stacks">
            <summary>
            Gets or sets the stacks.
            </summary>
            <value>
            The stacks.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Sphere.BoundingVolume">
            <summary>
            Gets the bounding volume.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Quadrics.Normals">
            <summary>
            The Quadric Normals.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Normals.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Normals.Flat">
            <summary>
            Flat.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Quadrics.Normals.Smooth">
            <summary>
            Smooth.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Lighting.Light">
            <summary>
            A Light is defined purely mathematically, but works well with OpenGL.
            A light is a scene element, it can be interacted with using the mouse
            and it is bindable.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Lighting.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Lighting.Light"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Lighting.Light.Push(SharpGL.OpenGL)">
            <summary>
            Pushes this object into the provided OpenGL instance.
            This will generally push elements of the attribute stack
            and then set current values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Lighting.Light.Pop(SharpGL.OpenGL)">
            <summary>
            Pops this object from the provided OpenGL instance.
            This will generally pop elements of the attribute stack,
            restoring previous attribute values.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Lighting.Light.Bind(SharpGL.OpenGL)">
            <summary>
            This function sets all of the lights parameters into OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.glCode">
            <summary>
            This is the OpenGL code for the light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.ambient">
            <summary>
            The ambient colour of the light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.diffuse">
            <summary>
            The diffuse color of the light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.specular">
            <summary>
            The specular colour of the light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.shadowColor">
            <summary>
            The colour of the shadow created by this light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.on">
            <summary>
            True when the light is on.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.position">
            <summary>
            The position of the light.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.castShadow">
            <summary>
            Should the light cast a shadow?
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Light.boundingVolumeHelper">
            <summary>
            Used to aid in the implementation of IVolumeBound.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.BoundingVolume">
            <summary>
            Gets the bounding volume.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.GLCode">
            <summary>
            Gets or sets the GL code.
            </summary>
            <value>
            The GL code.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.Ambient">
            <summary>
            Gets or sets the ambient.
            </summary>
            <value>
            The ambient.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.Diffuse">
            <summary>
            Gets or sets the diffuse.
            </summary>
            <value>
            The diffuse.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.Specular">
            <summary>
            Gets or sets the specular.
            </summary>
            <value>
            The specular.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.ShadowColor">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
            <value>
            The color of the shadow.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.On">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpGL.SceneGraph.Lighting.Light"/> is on.
            </summary>
            <value>
              <c>true</c> if on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Light.CastShadow">
            <summary>
            Gets or sets a value indicating whether [cast shadow].
            </summary>
            <value>
              <c>true</c> if [cast shadow]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.UV">
            <summary>
            A texture coordinate.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.UV.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.UV"/> struct.
            </summary>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.UV.u">
            <summary>
            The u value.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.UV.v">
            <summary>
            The v value.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.UV.U">
            <summary>
            Gets or sets the U.
            </summary>
            <value>
            The U.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.UV.V">
            <summary>
            Gets or sets the V.
            </summary>
            <value>
            The V.
            </value>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Core.BoundingVolume"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.FromVertices(System.Collections.Generic.IEnumerable{SharpGL.SceneGraph.Vertex})">
            <summary>
            Creates the volume from vertices.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.FromSphericalVolume(SharpGL.SceneGraph.Vertex,System.Single)">
            <summary>
            Creates the volume from a spherical volume.
            </summary>
            <param name="centre">The centre.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.FromCylindricalVolume(SharpGL.SceneGraph.Vertex,System.Single,System.Single,System.Single)">
            <summary>
            Creates the volume from a cylindrical volume.
            </summary>
            <param name="baseline">The baseline.</param>
            <param name="height">The height.</param>
            <param name="baseRadius">The base radius.</param>
            <param name="topRadius">The top radius.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.Pad(System.Single)">
            <summary>
            Pads the bounding volume.
            </summary>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.GetBoundDimensions(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the bound dimensions.
            </summary>
            <param name="x">The x size.</param>
            <param name="y">The y size.</param>
            <param name="z">The z size.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Core.BoundingVolume.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.ParticleSystems.Particle">
            <summary>
            This is the main particle class, if you want specialised particles derive from it.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.Particle.Intialise(System.Random)">
            <summary>
            This function should initialise the particle so that it's ready to tick.
            </summary>
            <param name="rand">The random number generator.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.Particle.Tick(System.Random)">
            <summary>
            This function moves the particle on a stage.
            </summary>
            <param name="rand">The random nunber generator.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.Particle.Draw(SharpGL.OpenGL)">
            <summary>
            This function draws the particle.
            </summary>
            <param name="gl"></param>
        </member>
        <member name="T:SharpGL.SceneGraph.ParticleSystems.BasicParticle">
            <summary>
            A basic particle.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.BasicParticle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.ParticleSystems.BasicParticle"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.BasicParticle.Intialise(System.Random)">
            <summary>
            This function initialises the basic particle.
            </summary>
            <param name="rand"></param>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.BasicParticle.Tick(System.Random)">
            <summary>
            This function 'ticks' the particle, i.e moves it on a stage.
            </summary>
            <param name="rand">A random object.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.position">
            <summary>
            This is the vertex's current position in space.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.velocity">
            <summary>
            This is the velocity, do not modify!
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.direction">
            <summary>
            This is the direction of the particle.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.directionRandomise">
            <summary>
            This shows the potential magnitude of the random effects of the direction.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.gravity">
            <summary>
            This is the gravity affecting the particle.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.color">
            <summary>
            Particles colour.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.colorRandomise">
            <summary>
            How much the particles colour can change by each tick.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.life">
            <summary>
            The life left of the particle.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.lifespan">
            <summary>
            The lifespan of the particle.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.ParticleSystems.BasicParticle.dieForever">
            <summary>
            Does the particle only exist once?
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.ParticleSystems.SphereParticle">
            <summary>
            A Sphere particle.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.SphereParticle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.ParticleSystems.SphereParticle"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.ParticleSystems.SphereParticle.Draw(SharpGL.OpenGL)">
            <summary>
            Draws the specified gl.
            </summary>
            <param name="gl">The gl.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.OpenGLSceneGraphExtensions">
            <summary>
            Extensions to the OpenGL class for use with the Scene Graph types (allowing
            vertices, GLColors etc to be used).
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLSceneGraphExtensions.Color(SharpGL.OpenGL,SharpGL.SceneGraph.GLColor)">
            <summary>
            Set the current color.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLSceneGraphExtensions.Project(SharpGL.OpenGL,SharpGL.SceneGraph.Vertex)">
            <summary>
            This is a SharpGL helper version, that projects the vertex passed, using the
            current matrixes.
            </summary>
            <param name="gl">The gl.</param>
            <param name="vertex">The object coordinates.</param>
            <returns>
            The screen coords.
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLSceneGraphExtensions.GetModelViewMatrix(SharpGL.OpenGL)">
            <summary>
            Gets the model view matrix.
            </summary>
            <param name="gl">The gl.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLSceneGraphExtensions.GetProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            Gets the projection matrix.
            </summary>
            <param name="gl">The gl.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLSceneGraphExtensions.GetTextureMatrix(SharpGL.OpenGL)">
            <summary>
            Gets the texture matrix.
            </summary>
            <param name="gl">The gl.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.SceneGraph.OpenGLSceneGraphExtensions.VertexPointer(SharpGL.OpenGL,System.Int32,System.UInt32,System.Int32,SharpGL.SceneGraph.Vertex[])">
            <summary>
            Vertexes the pointer.
            </summary>
            <param name="gl">The gl.</param>
            <param name="size">The size.</param>
            <param name="type">The type.</param>
            <param name="stride">The stride.</param>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.ScissorAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ScissorAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.ScissorAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ScissorAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.ScissorAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ScissorAttributes.EnableScissorTest">
            <summary>
            Gets or sets the enable scissor test.
            </summary>
            <value>
            The enable scissor test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ScissorAttributes.ScissorX">
            <summary>
            Gets or sets the scissor X.
            </summary>
            <value>
            The scissor X.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ScissorAttributes.ScissorY">
            <summary>
            Gets or sets the scissor Y.
            </summary>
            <value>
            The scissor Y.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ScissorAttributes.ScissorWidth">
            <summary>
            Gets or sets the width of the scissor.
            </summary>
            <value>
            The width of the scissor.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.ScissorAttributes.ScissorHeight">
            <summary>
            Gets or sets the height of the scissor.
            </summary>
            <value>
            The height of the scissor.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.EnableAttributes">
            <summary>
            This class has all the settings you can edit for fog.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.EnableAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.EnableAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.EnableAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.EnableAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableAlphaTest">
            <summary>
            Gets or sets the enable alpha test.
            </summary>
            <value>
            The enable alpha test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableAutoNormal">
            <summary>
            Gets or sets the enable auto normal.
            </summary>
            <value>
            The enable auto normal.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableBlend">
            <summary>
            Gets or sets the enable blend.
            </summary>
            <value>
            The enable blend.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableCullFace">
            <summary>
            Gets or sets the enable cull face.
            </summary>
            <value>
            The enable cull face.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableDepthTest">
            <summary>
            Gets or sets the enable depth test.
            </summary>
            <value>
            The enable depth test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableDither">
            <summary>
            Gets or sets the enable dither.
            </summary>
            <value>
            The enable dither.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableFog">
            <summary>
            Gets or sets the enable fog.
            </summary>
            <value>
            The enable fog.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableLighting">
            <summary>
            Gets or sets the enable lighting.
            </summary>
            <value>
            The enable lighting.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableLineSmooth">
            <summary>
            Gets or sets the enable line smooth.
            </summary>
            <value>
            The enable line smooth.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableLineStipple">
            <summary>
            Gets or sets the enable line stipple.
            </summary>
            <value>
            The enable line stipple.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableColorLogicOp">
            <summary>
            Gets or sets the enable color logic op.
            </summary>
            <value>
            The enable color logic op.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableIndexLogicOp">
            <summary>
            Gets or sets the enable index logic op.
            </summary>
            <value>
            The enable index logic op.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableNormalize">
            <summary>
            Gets or sets the enable normalize.
            </summary>
            <value>
            The enable normalize.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnablePointSmooth">
            <summary>
            Gets or sets the enable point smooth.
            </summary>
            <value>
            The enable point smooth.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnablePolygonOffsetLine">
            <summary>
            Gets or sets the enable polygon offset line.
            </summary>
            <value>
            The enable polygon offset line.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnablePolygonOffsetFill">
            <summary>
            Gets or sets the enable polygon offset fill.
            </summary>
            <value>
            The enable polygon offset fill.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnablePolygonOffsetPoint">
            <summary>
            Gets or sets the enable polygon offset point.
            </summary>
            <value>
            The enable polygon offset point.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnablePolygonSmooth">
            <summary>
            Gets or sets the enable polygon smooth.
            </summary>
            <value>
            The enable polygon smooth.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnablePolygonStipple">
            <summary>
            Gets or sets the enable polygon stipple.
            </summary>
            <value>
            The enable polygon stipple.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableScissorTest">
            <summary>
            Gets or sets the enable scissor test.
            </summary>
            <value>
            The enable scissor test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableStencilTest">
            <summary>
            Gets or sets the enable stencil test.
            </summary>
            <value>
            The enable stencil test.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableTexture1D">
            <summary>
            Gets or sets the enable texture1 D.
            </summary>
            <value>
            The enable texture1 D.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.EnableAttributes.EnableTexture2D">
            <summary>
            Gets or sets the enable texture2 D.
            </summary>
            <value>
            The enable texture2 D.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.CurrentAttributes">
            <summary>
            This class has all the settings you can edit for current.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.CurrentAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.CurrentAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.CurrentAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.CurrentAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentColor">
            <summary>
            Gets or sets the color of the current.
            </summary>
            <value>
            The color of the current.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentColorIndex">
            <summary>
            Gets or sets the index of the current color.
            </summary>
            <value>
            The index of the current color.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentNormalVector">
            <summary>
            Gets or sets the current normal vector.
            </summary>
            <value>
            The current normal vector.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentTextureCoordiate">
            <summary>
            Gets or sets the current texture coordiate.
            </summary>
            <value>
            The current texture coordiate.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentRasterPosition">
            <summary>
            Gets or sets the current raster position.
            </summary>
            <value>
            The current raster position.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentRasterColor">
            <summary>
            Gets or sets the color of the current raster.
            </summary>
            <value>
            The color of the current raster.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentRasterColorIndex">
            <summary>
            Gets or sets the index of the current raster color.
            </summary>
            <value>
            The index of the current raster color.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentRasterTextureCoordiate">
            <summary>
            Gets or sets the current raster texture coordiate.
            </summary>
            <value>
            The current raster texture coordiate.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.CurrentAttributes.CurrentEdgeFlag">
            <summary>
            Gets or sets the current edge flag.
            </summary>
            <value>
            The current edge flag.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Quadrics.Disk">
            <summary>
            The Disk class wraps both the disk and partial disk quadrics.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Disk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Quadrics.Disk"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Quadrics.Disk.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Disk.InnerRadius">
            <summary>
            Gets or sets the inner radius.
            </summary>
            <value>
            The inner radius.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Disk.OuterRadius">
            <summary>
            Gets or sets the outer radius.
            </summary>
            <value>
            The outer radius.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Disk.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>
            The start angle.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Disk.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
            <value>
            The sweep angle.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Disk.Slices">
            <summary>
            Gets or sets the slices.
            </summary>
            <value>
            The slices.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Quadrics.Disk.Loops">
            <summary>
            Gets or sets the loops.
            </summary>
            <value>
            The loops.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Primitives.Shadow">
            <summary>
            A Shadow object can be added as a child of a polygon.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Shadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Primitives.Shadow"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Shadow.Render(SharpGL.OpenGL,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Render to the provided instance of OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Shadow.SetConnectivity">
            <summary>
            This function calculates the neighbours in a face.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Shadow.CastShadow(SharpGL.OpenGL)">
            <summary>
            Casts a real time 3D shadow.
            </summary>
            <param name="gl">The OpenGL object.</param>
            <param name="lights">The lights.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Primitives.Shadow.DoShadowPass(SharpGL.OpenGL,SharpGL.SceneGraph.Vertex,System.Boolean[])">
            <summary>
            This is part of the shadow casting code, it does a shadowpass for the
            polygon using the specified light.
            </summary>
            <param name="gl">The OpenGL object.</param>
            <param name="light">The light casting the shadow.</param>
            <param name="visibleArray">An array of bools.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Shadow.connectivitySet">
            <summary>
            Are the face neighbours calculated?
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Primitives.Shadow.shadowSize">
            <summary>
            The size of the shadow in each direction.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Shadow.ParentPolygon">
            <summary>
            Gets the parent polygon.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Primitives.Shadow.ShadowSize">
            <summary>
            Gets or sets the size of the shadow.
            </summary>
            <value>
            The size of the shadow.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Lighting.Spotlight">
            <summary>
            A spotlight has a direction and a spot cutoff.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Lighting.Spotlight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Lighting.Spotlight"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Lighting.Spotlight.Bind(SharpGL.OpenGL)">
            <summary>
            This function sets all of the lights parameters into OpenGL.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Spotlight.spotCutoff">
            <summary>
            The spotlight cutoff value (between 0-90 for spotlights, or 180 for a 
            simple light).
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Lighting.Spotlight.direction">
            <summary>
            A Vector describing the direction of the spotlight.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Spotlight.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Lighting.Spotlight.SpotCutoff">
            <summary>
            Gets or sets the spot cutoff.
            </summary>
            <value>
            The spot cutoff.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Designers.OpenGLCtrlDesigner">
            <summary>
            This aids the design of the OpenGLCtrl
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.NETDesignSurface.Designers.OpenGLCtrlDesigner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.NETDesignSurface.Designers.OpenGLCtrlDesigner"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.NETDesignSurface.Designers.OpenGLCtrlDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Remove Control properties that are not supported by the control.
            </summary>
            <param name="Properties"></param>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Converters.VertexConverter">
            <summary>
            The VertexConverter class allows you to edit vertices in the propties window.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Converters.MaterialCollectionConverter">
            <summary>
            This converts the Material Collection into something more functional.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Editors.UITextureEditor">
            <summary>
            The texture editor makes Textures in the properties window much better,
            giving them a little thumbnail.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Editors.QuadricCollectionEditor">
            <summary>
            This converts the Quadric Collection into something more functional, and
            allows you to add many types of quadrics.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Editors.CameraCollectionEditor">
            <summary>
            This converts the Camera collection into something more usable (design time wise)
            by allowing all the types of camera to be added.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.NETDesignSurface.Editors.EvaluatorCollectionEditor">
            <summary>
            This converts the evaluator collection into something more usable (design time wise)
            by allowing all the types of evaluator to be added.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Scene"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.DoHitTest(System.Int32,System.Int32)">
            <summary>
            Performs a hit test on the scene. All elements that implement IVolumeBound will
            be hit tested.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The elements hit.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.Draw(SharpGL.SceneGraph.Cameras.Camera)">
            <summary>
            This function draws all of the objects in the scene (i.e. every quadric
            in the quadrics arraylist etc).
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.RenderElement(SharpGL.SceneGraph.Core.SceneElement,SharpGL.SceneGraph.Core.RenderMode)">
            <summary>
            Renders the element.
            </summary>
            <param name="gl">The gl.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.RenderElementForHitTest(SharpGL.SceneGraph.Core.SceneElement,System.Collections.Generic.Dictionary{System.UInt32,SharpGL.SceneGraph.Core.SceneElement},System.UInt32@)">
            <summary>
            Renders the element for hit test.
            </summary>
            <param name="sceneElement">The scene element.</param>
            <param name="hitMap">The hit map.</param>
            <param name="currentName">Current hit name.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.Resize(System.Int32,System.Int32)">
            <summary>
            Use this function to resize the scene window, and also to look through
            the current camera.
            </summary>
            <param name="width">Width of the screen.</param>
            <param name="height">Height of the screen.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.CreateInContext(SharpGL.OpenGL)">
            <summary>
            Create in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Scene.DestroyInContext(SharpGL.OpenGL)">
            <summary>
            Destroy in the context of the supplied OpenGL instance.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="F:SharpGL.SceneGraph.Scene.gl">
            <summary>
            This is the OpenGL class, use it to call OpenGL functions.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Scene.sceneContainer">
            <summary>
            The main scene container - this is the top level element of the Scene Tree.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Scene.assets">
            <summary>
            The set of scene assets.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Scene.currentCamera">
            <summary>
            This is the camera that is currently being used to view the scene.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Scene.clearColour">
            <summary>
            This is the colour of the background of the scene.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.OpenGL">
            <summary>
            Gets or sets the open GL.
            </summary>
            <value>
            The open GL.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.SceneContainer">
            <summary>
            Gets or sets the scene container.
            </summary>
            <value>
            The scene container.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.CurrentCamera">
            <summary>
            Gets or sets the current camera.
            </summary>
            <value>
            The current camera.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.ClearColor">
            <summary>
            Gets or sets the color of the clear.
            </summary>
            <value>
            The color of the clear.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.RenderBoundingVolumes">
            <summary>
            Gets or sets a value indicating whether [render bounding volumes].
            </summary>
            <value>
            	<c>true</c> if [render bounding volumes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.SceneGraph.Scene.CurrentOpenGLContext">
            <summary>
            Gets the current OpenGL that the object exists in context.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Helpers.OpenGLHelper">
            <summary>
            The OpenGL Helper is a class that provides some helper functions for working with OpenGL.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Helpers.OpenGLHelper.InitialiseHighQuality(SharpGL.OpenGL)">
            <summary>
            Initialises the supplied OpenGL instance for high quality rendering.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="T:SharpGL.SceneGraph.MatrixLibraryExceptions">
            <summary>
            A 4x4 matrix.
            </summary>
        </member>
        <member name="T:SharpGL.SceneGraph.Matrix">
            <summary>
            Matrix Library .Net v2.0 By Anas Abidi, 2004.
            
            The Matrix Library contains Class Matrix which provides many 
            static methods for making various matrix operations on objects
            derived from the class or on arrays defined as double. The 
            '+','-','*' operators are overloaded to work with the objects
            derived from the matrix class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:SharpGL.SceneGraph.Matrix.in_Mat">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Matrix object constructor, constructs an empty
            matrix with dimensions: rows = noRows and cols = noCols.
            </summary>
            <param name="noRows"> no. of rows in this matrix </param>
            <param name="noCols"> no. of columns in this matrix</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Matrix object constructor, constructs a matrix from an
            already defined array object.
            </summary>
            <param name="Mat">the array the matrix will contain</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.FromColumnMajorArray(System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates a matrix from a column major array.
            </summary>
            <param name="columnMajorArray">The column major array.</param>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.FromRowMajorArray(System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates a matrix from a row major array.
            </summary>
            <param name="columnMajorArray">The column major array.</param>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.FromOtherMatrix(SharpGL.SceneGraph.Matrix,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from a segment of another matrix.
            </summary>
            <param name="rhs">The RHS.</param>
            <param name="rows">The rows.</param>
            <param name="cols">The cols.</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.OneD_2_TwoD(System.Double[])">
            <summary>
            Returns the 2D form of a 1D array. i.e. array with
            dimension[n] is returned as an array with dimension [n,1]. 
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat"> 
            the array to convert, with dimesion [n] 
            </param>
            <returns> the same array but with [n,1] dimension </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.TwoD_2_OneD(System.Double[0:,0:])">
            <summary>
            Returns the 1D form of a 2D array. i.e. array with
            dimension[n,1] is returned as an array with dimension [n]. 
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">
            the array to convert, with dimesions [n,1] 
            </param>
            <returns>the same array but with [n] dimension</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.SetIdentity">
            <summary>
            Sets the identity matrix as the identity matrix. It must be N x N (i.e.
            square).
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Identity(System.Int32)">
            <summary>
            Returns an Identity matrix with dimensions [n,n] in the from of an array.
            </summary>
            <param name="n">the no. of rows or no. cols in the matrix</param>
            <returns>An identity Matrix with dimensions [n,n] in the form of an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in the summation</param>
            <param name="Mat2">Second array in the summation</param>
            <returns>Sum of Mat1 and Mat2 as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Add(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First matrix in the summation</param>
            <param name="Mat2">Second matrix in the summation</param>
            <returns>Sum of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Addition(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in the summation</param>
            <param name="Mat2">Second Matrix object in the summation</param>
            <returns>Sum of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Subtract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in the subtraction</param>
            <param name="Mat2">Second array in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Subtract(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First matrix in the subtraction</param>
            <param name="Mat2">Second matrix in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Subtraction(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in the subtraction</param>
            <param name="Mat2">Second Matrix object in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">First array in multiplication</param>
            <param name="Mat2">Second array in multiplication</param>
            <returns>Mat1 multiplied by Mat2 as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Multiply(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions OR the cross-product of two vectors.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">
            First matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <param name="Mat2">
            Second matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <returns>Mat1 multiplied by Mat2 as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Multiply(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions OR the cross-product of two vectors.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">
            First matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <param name="Mat2">
            Second matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <returns>Mat1 multiplied by Mat2 as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Det(System.Double[0:,0:])">
            <summary>
            Returns the determinant of a matrix with [n,n] dimension.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Array with [n,n] dimension whose determinant is to be found
            </param>
            <returns>Determinant of the array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Det(SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the determinant of a matrix with [n,n] dimension.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Matrix object with [n,n] dimension whose determinant is to be found
            </param>
            <returns>Determinant of the Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Inverse(System.Double[0:,0:])">
            <summary>
            Returns the inverse of a matrix with [n,n] dimension 
            and whose determinant is not zero.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Array with [n,n] dimension whose inverse is to be found
            </param>
            <returns>Inverse of the array as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Inverse(SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the inverse of a matrix with [n,n] dimension 
            and whose determinant is not zero.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Matrix object with [n,n] dimension whose inverse is to be found
            </param>
            <returns>Inverse of the matrix as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Transpose(System.Double[0:,0:])">
            <summary>
            Returns the transpose of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">Array whose transpose is to be found</param>
            <returns>Transpose of the array as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Transpose(SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the transpose of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">Matrix object whose transpose is to be found</param>
            <returns>Transpose of the Matrix object as a Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.SVD(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Evaluates the Singular Value Decomposition of a matrix, 
            returns the  matrices S, U and V. Such that a given
            Matrix = U x S x V'.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'Singular Value Decomposition'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat_">Array whose SVD is to be computed</param>
            <param name="S_">An array where the S matrix is returned</param>
            <param name="U_">An array where the U matrix is returned</param>
            <param name="V_">An array where the V matrix is returned</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.SVD(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix@,SharpGL.SceneGraph.Matrix@,SharpGL.SceneGraph.Matrix@)">
            <summary>
            Evaluates the Singular Value Decomposition of a matrix, 
            returns the  matrices S, U and V. Such that a given
            Matrix = U x S x V'.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'Singular Value Decomposition'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">Matrix object whose SVD is to be computed</param>
            <param name="S">A Matrix object where the S matrix is returned</param>
            <param name="U">A Matrix object where the U matrix is returned</param>
            <param name="V">A Matrix object where the V matrix is returned</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.LU(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the LU Decomposition of a matrix. 
            the output is: lower triangular matrix L, upper
            triangular matrix U, and permutation matrix P so that
            P*X = L*U.
            In case of an error the error is raised as an exception.
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat">Array which will be LU Decomposed</param>
            <param name="L">An array where the lower traingular matrix is returned</param>
            <param name="U">An array where the upper traingular matrix is returned</param>
            <param name="P">An array where the permutation matrix is returned</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.LU(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix@,SharpGL.SceneGraph.Matrix@,SharpGL.SceneGraph.Matrix@)">
            <summary>
            Returns the LU Decomposition of a matrix. 
            the output is: lower triangular matrix L, upper
            triangular matrix U, and permutation matrix P so that
            P*X = L*U.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat">Matrix object which will be LU Decomposed</param>
            <param name="L">A Matrix object where the lower traingular matrix is returned</param>
            <param name="U">A Matrix object where the upper traingular matrix is returned</param>
            <param name="P">A Matrix object where the permutation matrix is returned</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.SolveLinear(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Solves a set of n linear equations A.X = B, and returns
            X, where A is [n,n] and B is [n,1]. 
            In the same manner if you need to compute: inverse(A).B, it is
            better to use this method instead, as it is much faster.  
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="MatA">The array 'A' on the left side of the equations A.X = B</param>
            <param name="MatB">The array 'B' on the right side of the equations A.X = B</param>
            <returns>Array 'X' in the system of equations A.X = B</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.SolveLinear(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Solves a set of n linear equations A.X = B, and returns
            X, where A is [n,n] and B is [n,1]. 
            In the same manner if you need to compute: inverse(A).B, it is
            better to use this method instead, as it is much faster.  
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="MatA">Matrix object 'A' on the left side of the equations A.X = B</param>
            <param name="MatB">Matrix object 'B' on the right side of the equations A.X = B</param>
            <returns>Matrix object 'X' in the system of equations A.X = B</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Rank(System.Double[0:,0:])">
            <summary>
            Returns the rank of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">An array whose rank is to be found</param>
            <returns>The rank of the array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Rank(SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the rank of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">a Matrix object whose rank is to be found</param>
            <returns>The rank of the Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.PINV(System.Double[0:,0:])">
            <summary>
            Returns the pseudoinverse of a matrix, such that
            X = PINV(A) produces a matrix 'X' of the same dimensions
            as A' so that A*X*A = A, X*A*X = X.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">An array whose pseudoinverse is to be found</param>
            <returns>The pseudoinverse of the array as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.PINV(SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the pseudoinverse of a matrix, such that
            X = PINV(A) produces a matrix 'X' of the same dimensions
            as A' so that A*X*A = A, X*A*X = X.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">a Matrix object whose pseudoinverse is to be found</param>
            <returns>The pseudoinverse of the Matrix object as a Matrix Object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Eigen(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the Eigenvalues and Eigenvectors of a real symmetric
            matrix, which is of dimensions [n,n]. 
            In case of an error the error is raised as an exception.
            Note: This method is based on the 'Eigenvalues and Eigenvectors of a TridiagonalMatrix'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">
            The array whose Eigenvalues and Eigenvectors are to be found
            </param>
            <param name="d">An array where the eigenvalues are returned</param>
            <param name="v">An array where the eigenvectors are returned</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Eigen(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix@,SharpGL.SceneGraph.Matrix@)">
            <summary>
            Returns the Eigenvalues and Eigenvectors of a real symmetric
            matrix, which is of dimensions [n,n]. In case of an error the
            error is raised as an exception.
            Note: This method is based on the 'Eigenvalues and Eigenvectors of a TridiagonalMatrix'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">
            The Matrix object whose Eigenvalues and Eigenvectors are to be found
            </param>
            <param name="d">A Matrix object where the eigenvalues are returned</param>
            <param name="v">A Matrix object where the eigenvectors are returned</param>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.ScalarMultiply(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the array</param>
            <param name="Mat">Array which is to be multiplied by a scalar</param>
            <returns>The multiplication of the scalar and the array as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.ScalarMultiply(System.Double,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the array</param>
            <param name="Mat">Matrix which is to be multiplied by a scalar</param>
            <returns>The multiplication of the scalar and the array as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Multiply(SharpGL.SceneGraph.Matrix,System.Double)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">Matrix object which is to be multiplied by a scalar</param>
            <param name="Value">The scalar value to multiply the Matrix object</param>
            <returns>
            The multiplication of the scalar and the Matrix object as a 
            Matrix object
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Multiply(System.Double,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the Matrix object</param>
            <param name="Mat">Matrix object which is to be multiplied by a scalar</param>
            <returns>
            The multiplication of the scalar and the Matrix object as a 
            Matrix object
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.ScalarDivide(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the array with</param>
            <param name="Mat">Array which is to be divided by a scalar</param>
            <returns>The division of the array and the scalar as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.ScalarDivide(System.Double,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the array with</param>
            <param name="Mat">Matrix which is to be divided by a scalar</param>
            <returns>The division of the array and the scalar as an array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Division(SharpGL.SceneGraph.Matrix,System.Double)">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the Matrix object with</param>
            <param name="Mat">Matrix object which is to be divided by a scalar</param>
            <returns>
            The division of the Matrix object and the scalar as a Matrix object
            </returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.CrossProduct(System.Double[],System.Double[])">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3]) in the cross product</param>
            <param name="V2">Second vector array (dimension [3]) in the cross product</param>
            <returns>Cross product of V1 and V2 as an array (dimension [3])</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.CrossProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3x1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimensions [3,1]) in the cross product</param>
            <param name="V2">Second vector array (dimensions [3,1]) in the cross product</param>
            <returns>Cross product of V1 and V2 as an array (dimension [3,1])</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.CrossProduct(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3x1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First Matrix (dimensions [3,1]) in the cross product</param>
            <param name="V2">Second Matrix (dimensions [3,1]) in the cross product</param>
            <returns>Cross product of V1 and V2 as a matrix (dimension [3,1])</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.DotProduct(System.Double[],System.Double[])">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3]) in the dot product</param>
            <param name="V2">Second vector array (dimension [3]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.DotProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3,1]) in the dot product</param>
            <param name="V2">Second vector array (dimension [3,1]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.DotProduct(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First Matrix object (dimension [3,1]) in the dot product</param>
            <param name="V2">Second Matrix object (dimension [3,1]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.VectorMagnitude(System.Double[])">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">The vector array (dimension [3]) whose magnitude is to be found</param>
            <returns>The magnitude of the vector array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.VectorMagnitude(System.Double[0:,0:])">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">The vector array (dimension [3,1]) whose magnitude is to be found</param>
            <returns>The magnitude of the vector array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.VectorMagnitude(SharpGL.SceneGraph.Matrix)">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">Matrix object (dimension [3,1]) whose magnitude is to be found</param>
            <returns>The magnitude of the Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.IsEqual(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Checks if two Arrays of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in equality check</param>
            <param name="Mat2">Second array in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.IsEqual(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix in equality check</param>
            <param name="Mat2">Second Matrix in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Equality(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in equality check</param>
            <param name="Mat2">Second Matrix object in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.op_Inequality(SharpGL.SceneGraph.Matrix,SharpGL.SceneGraph.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are not equal.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in equality check</param>
            <param name="Mat2">Second Matrix object in equality check</param>
            <returns>If two matrices are not equal</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a MatrixLibrary.Matrix
            object and is identical to this MatrixLibrary.Matrix object.
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>This method returns true if obj is the specified Matrix object identical to this Matrix object; otherwise, false.</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.PrintMat(System.Double[0:,0:])">
            <summary>
            Returns a matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">The array to be viewed</param>
            <returns>The string view of the array</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.PrintMat(SharpGL.SceneGraph.Matrix)">
            <summary>
            Returns a matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">The Matrix object to be viewed</param>
            <returns>The string view of the Matrix object</returns>
        </member>
        <member name="M:SharpGL.SceneGraph.Matrix.ToString">
            <summary>
            Returns the matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <returns>The string view of the Matrix object</returns>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Set or get an element from the matrix
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.Rows">
            <summary>
            Set or get the no. of rows in the matrix.
            Warning: Setting this property will delete all of
            the elements of the matrix and set them to zero.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.Columns">
            <summary>
            Set or get the no. of columns in the matrix.
            Warning: Setting this property will delete all of
            the elements of the matrix and set them to zero.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.AsArray">
            <summary>
            This property returns the matrix as an array.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.AsRowMajorArray">
            <summary>
            Gets the matrix as a row major array.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.AsRowMajorArrayFloat">
            <summary>
            Gets the matrix as a row major array.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.AsColumnMajorArray">
            <summary>
            Gets the matrix as a column major array.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Matrix.AsColumnMajorArrayFloat">
            <summary>
            Gets the matrix as a column major array.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.PolygonAttributes">
            <summary>
            The polygon settings.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PolygonAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.PolygonAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PolygonAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.PolygonAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.EnableCullFace">
            <summary>
            Gets or sets the enable cull face.
            </summary>
            <value>
            The enable cull face.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.EnableSmooth">
            <summary>
            Gets or sets the enable smooth.
            </summary>
            <value>
            The enable smooth.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.CullFaces">
            <summary>
            Gets or sets the cull faces.
            </summary>
            <value>
            The cull faces.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.FrontFaces">
            <summary>
            Gets or sets the front faces.
            </summary>
            <value>
            The front faces.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.PolygonMode">
            <summary>
            Gets or sets the polygon draw mode.
            </summary>
            <value>
            The polygon draw mode.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.OffsetFactor">
            <summary>
            Gets or sets the offset factor.
            </summary>
            <value>
            The offset factor.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.OffsetBias">
            <summary>
            Gets or sets the offset bias.
            </summary>
            <value>
            The offset bias.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.EnableOffsetPoint">
            <summary>
            Gets or sets the enable offset point.
            </summary>
            <value>
            The enable offset point.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.EnableOffsetLine">
            <summary>
            Gets or sets the enable offset line.
            </summary>
            <value>
            The enable offset line.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.PolygonAttributes.EnableOffsetFill">
            <summary>
            Gets or sets the enable offset fill.
            </summary>
            <value>
            The enable offset fill.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.LineAttributes">
            <summary>
            The line attributes.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.LineAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.LineAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.LineAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.LineAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.LineAttributes.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.LineAttributes.Smooth">
            <summary>
            Gets or sets the smooth.
            </summary>
            <value>
            The smooth.
            </value>
        </member>
        <member name="T:SharpGL.OpenGLAttributes.HintAttributes">
            <summary>
            This class has all the settings you can edit for hints.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.HintAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLAttributes.HintAttributes"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.HintAttributes.SetAttributes(SharpGL.OpenGL)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="gl">The OpenGL instance.</param>
        </member>
        <member name="M:SharpGL.OpenGLAttributes.HintAttributes.AreAnyAttributesSet">
            <summary>
            Returns true if any attributes are set.
            </summary>
            <returns>
            True if any attributes are set
            </returns>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.HintAttributes.PerspectiveCorrectionHint">
            <summary>
            Gets or sets the perspective correction hint.
            </summary>
            <value>
            The perspective correction hint.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.HintAttributes.PointSmoothHint">
            <summary>
            Gets or sets the point smooth hint.
            </summary>
            <value>
            The point smooth hint.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.HintAttributes.LineSmoothHint">
            <summary>
            Gets or sets the line smooth hint.
            </summary>
            <value>
            The line smooth hint.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.HintAttributes.PolygonSmoothHint">
            <summary>
            Gets or sets the polygon smooth hint.
            </summary>
            <value>
            The polygon smooth hint.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLAttributes.HintAttributes.FogHint">
            <summary>
            Gets or sets the fog hint.
            </summary>
            <value>
            The fog hint.
            </value>
        </member>
        <member name="T:SharpGL.SceneGraph.Cameras.ArcBallCamera">
            <summary>
            The ArcBall camera supports arcball projection, making it ideal for use with a mouse.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.ArcBallCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.SceneGraph.Cameras.PerspectiveCamera"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.SceneGraph.Cameras.ArcBallCamera.TransformProjectionMatrix(SharpGL.OpenGL)">
            <summary>
            This is the class' main function, to override this function and perform a 
            perspective transformation.
            </summary>
        </member>
        <member name="F:SharpGL.SceneGraph.Cameras.ArcBallCamera.arcBall">
            <summary>
            The arcball used for rotating.
            </summary>
        </member>
        <member name="P:SharpGL.SceneGraph.Cameras.ArcBallCamera.ArcBall">
            <summary>
            Gets the arc ball.
            </summary>
        </member>
    </members>
</doc>

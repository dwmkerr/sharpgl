<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGL</name>
    </assembly>
    <members>
        <member name="T:SharpGL.FontOutlineEntry">
            <summary>
            A FontOutline entry contains the details of a font face.
            </summary>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.HDC">
            <summary>
            Gets or sets the HDC.
            </summary>
            <value>
            The HDC.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.HRC">
            <summary>
            Gets or sets the HRC.
            </summary>
            <value>
            The HRC.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.FaceName">
            <summary>
            Gets or sets the name of the face.
            </summary>
            <value>
            The name of the face.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.ListBase">
            <summary>
            Gets or sets the list base.
            </summary>
            <value>
            The list base.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.ListCount">
            <summary>
            Gets or sets the list count.
            </summary>
            <value>
            The list count.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.Deviation">
            <summary>
            Gets or sets the deviation.
            </summary>
            <value>
            The deviation.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.Extrusion">
            <summary>
            Gets or sets the extrusion.
            </summary>
            <value>
            The extrusion.
            </value>
        </member>
        <member name="P:SharpGL.FontOutlineEntry.FontOutlineFormat">
            <summary>
            Gets or sets the font outline format.
            </summary>
            <value>
            The font outline format.
            </value>
        </member>
        <member name="T:SharpGL.FontOutlineFormat">
            <summary>
            The font outline format.
            </summary>
        </member>
        <member name="F:SharpGL.FontOutlineFormat.Lines">
            <summary>
            Render using lines.
            </summary>
        </member>
        <member name="F:SharpGL.FontOutlineFormat.Polygons">
            <summary>
            Render using polygons.
            </summary>
        </member>
        <member name="T:SharpGL.FontOutlines">
            <summary>
            This class wraps the functionality of the wglUseFontOutlines function to
            allow straightforward rendering of text.
            </summary>
        </member>
        <member name="M:SharpGL.FontOutlines.DrawText(SharpGL.OpenGL,System.String,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Draws the text.
            </summary>
            <param name="gl">The gl.</param>
            <param name="faceName">Name of the face.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="deviation">The deviation.</param>
            <param name="extrusion">The extrusion.</param>
            <param name="text">The text.</param>
        </member>
        <member name="F:SharpGL.FontOutlines.fontOutlineEntries">
            <summary>
            The cache of font outline entries.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGL">
            <summary>
            The OpenGL class wraps Suns OpenGL 3D library.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_POINTS">
            <summary>
            Treats each vertex as a single point. Vertex n defines point n. N points are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_LINES">
            <summary>
            Treats each pair of vertices as an independent line segment. Vertices 2n - 1 and 2n define line n. N/2 lines are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_LINE_LOOP">
            <summary>
            Draws a connected group of line segments from the first vertex to the last, then back to the first. Vertices n and n + 1 define line n. The last line, however, is defined by vertices N and 1. N lines are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_LINE_STRIP">
            <summary>
            Draws a connected group of line segments from the first vertex to the last. Vertices n and n+1 define line n. N - 1 lines are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_TRIANGLES">
            <summary>
            Treats each triplet of vertices as an independent triangle. Vertices 3n - 2, 3n - 1, and 3n define triangle n. N/3 triangles are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_TRIANGLE_STRIP">
            <summary>
            Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. For odd n, vertices n, n + 1, and n + 2 define triangle n. For even n, vertices n + 1, n, and n + 2 define triangle n. N - 2 triangles are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_TRIANGLE_FAN">
            <summary>
            Draws a connected group of triangles. one triangle is defined for each vertex presented after the first two vertices. Vertices 1, n + 1, n + 2 define triangle n. N - 2 triangles are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_QUADS">
            <summary>
            Treats each group of four vertices as an independent quadrilateral. Vertices 4n - 3, 4n - 2, 4n - 1, and 4n define quadrilateral n. N/4 quadrilaterals are drawn.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_QUAD_STRIP">
            <summary>
            Draws a connected group of quadrilaterals. One quadrilateral is defined for each pair of vertices presented after the first pair. Vertices 2n - 1, 2n, 2n + 2, and 2n + 1 define quadrilateral n. N/2 - 1 quadrilaterals are drawn. Note that the order in which vertices are used to construct a quadrilateral from strip data is different from that used with independent data.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.GL_POLYGON">
            <summary>
            Draws a single, convex polygon. Vertices 1 through N define this polygon.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.IsExtensionFunctionSupported(System.String)">
            <summary>
            Determines whether a named extension function is supported.
            </summary>
            <param name="extensionFunctionName">Name of the extension function.</param>
            <returns>
            	<c>true</c> if the extension function is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpGL.OpenGL.InvokeExtensionFunction``1(System.Object[])">
            <summary>
            Invokes an extension function.
            </summary>
            <typeparam name="T">The extension delegate type.</typeparam>
            <param name="args">The arguments to the pass to the function.</param>
            <returns>The return value of the extension function.</returns>
        </member>
        <member name="F:SharpGL.OpenGL.extensionFunctions">
            <summary>
            The set of extension functions.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.TexImage3DEXT(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture subimage.
            </summary>
            <param name="target">The target.</param>
            <param name="level">The level.</param>
            <param name="internalformat">The internalformat.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="border">The border.</param>
            <param name="format">The format.</param>
            <param name="type">The type.</param>
            <param name="pixels">The pixels.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexSubImage3DEXT(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Texes the sub image3 DEXT.
            </summary>
            <param name="target">The target.</param>
            <param name="level">The level.</param>
            <param name="xoffset">The xoffset.</param>
            <param name="yoffset">The yoffset.</param>
            <param name="zoffset">The zoffset.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">The format.</param>
            <param name="type">The type.</param>
            <param name="pixels">The pixels.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawRangeElementsEXT(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Render primitives from array data.
            </summary>
            <param name="mode">The mode.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="count">The count.</param>
            <param name="type">The type.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Accum(System.UInt32,System.Single)">
            <summary>
            Set the Accumulation Buffer operation.
            </summary>
            <param name="op">Operation of the buffer.</param>
            <param name="value">Reference value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Accum(SharpGL.Enumerations.AccumOperation,System.Single)">
            <summary>
            Set the Accumulation Buffer operation.
            </summary>
            <param name="op">Operation of the buffer.</param>
            <param name="value">Reference value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.AlphaFunc(System.UInt32,System.Single)">
            <summary>
            Specify the Alpha Test function.
            </summary>
            <param name="func">Specifies the alpha comparison function. Symbolic constants OpenGL.NEVER, OpenGL.LESS, OpenGL.EQUAL, OpenGL.LEQUAL, OpenGL.GREATER, OpenGL.NOTEQUAL, OpenGL.GEQUAL and OpenGL.ALWAYS are accepted. The initial value is OpenGL.ALWAYS.</param>
            <param name="reference">Specifies the reference	value that incoming alpha values are compared to. This value is clamped to the range 0	through	1, where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.AlphaFunc(SharpGL.Enumerations.AlphaTestFunction,System.Single)">
            <summary>
            Specify the Alpha Test function.
            </summary>
            <param name="function">Specifies the alpha comparison function.</param>
            <param name="reference">Specifies the reference	value that incoming alpha values are compared to. This value is clamped to the range 0	through	1, where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.AreTexturesResident(System.Int32,System.UInt32[],System.Byte[])">
            <summary>
            Determine if textures are loaded in texture memory.
            </summary>
            <param name="n">Specifies the number of textures to be queried.</param>
            <param name="textures">Specifies an array containing the names of the textures to be queried.</param>
            <param name="residences">Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.OpenGL.ArrayElement(System.Int32)">
            <summary>
            Render a vertex using the specified vertex array element.
            </summary>
            <param name="i">Specifies an index	into the enabled vertex	data arrays.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Begin(System.UInt32)">
            <summary>
            Begin drawing geometry in the specified mode.
            </summary>
            <param name="mode">The mode to draw in, e.g. OpenGL.POLYGONS.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Begin(SharpGL.Enumerations.BeginMode)">
            <summary>
            Begin drawing geometry in the specified mode.
            </summary>
            <param name="mode">The mode to draw in, e.g. OpenGL.POLYGONS.</param>
        </member>
        <member name="M:SharpGL.OpenGL.BeginCurve(System.IntPtr)">
            <summary>
            This function begins drawing a NURBS curve.
            </summary>
            <param name="nurbsObject">The NURBS object.</param>
        </member>
        <member name="M:SharpGL.OpenGL.BeginSurface(System.IntPtr)">
            <summary>
            This function begins drawing a NURBS surface.
            </summary>
            <param name="nurbsObject">The NURBS object.</param>
        </member>
        <member name="M:SharpGL.OpenGL.BindTexture(System.UInt32,System.UInt32)">
            <summary>
            Call this function after creating a texture to finalise creation of it, 
            or to make an existing texture current.
            </summary>
            <param name="target">The target type, e.g TEXTURE_2D.</param>
            <param name="texture">The OpenGL texture object.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Bitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
            <summary>
            Draw a bitmap.
            </summary>
            <param name="width">Specify the pixel width	of the bitmap image.</param>
            <param name="height">Specify the pixel height of the bitmap image.</param>
            <param name="xorig">Specify	the location of	the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.</param>
            <param name="yorig">Specify	the location of	the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.</param>
            <param name="xmove">Specify	the x and y offsets to be added	to the current	raster position	after the bitmap is drawn.</param>
            <param name="ymove">Specify	the x and y offsets to be added	to the current	raster position	after the bitmap is drawn.</param>
            <param name="bitmap">Specifies the address of the bitmap image.</param>
        </member>
        <member name="M:SharpGL.OpenGL.BlendFunc(System.UInt32,System.UInt32)">
            <summary>
            This function sets the current blending function.
            </summary>
            <param name="sfactor">Source factor.</param>
            <param name="dfactor">Destination factor.</param>
        </member>
        <member name="M:SharpGL.OpenGL.BlendFunc(SharpGL.Enumerations.BlendingSourceFactor,SharpGL.Enumerations.BlendingDestinationFactor)">
            <summary>
            This function sets the current blending function.
            </summary>
            <param name="sourceFactor">The source factor.</param>
            <param name="destinationFactor">The destination factor.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CallList(System.UInt32)">
            <summary>
            This function calls a certain display list.
            </summary>
            <param name="list">The display list to call.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CallLists(System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            Execute	a list of display lists.
            </summary>
            <param name="n">Specifies the number of display lists to be executed.</param>
            <param name="type">Specifies the type of values in lists. Symbolic constants OpenGL.BYTE, OpenGL.UNSIGNED_BYTE, OpenGL.SHORT, OpenGL.UNSIGNED_SHORT, OpenGL.INT, OpenGL.UNSIGNED_INT, OpenGL.FLOAT, OpenGL.2_BYTES, OpenGL.3_BYTES and OpenGL.4_BYTES are accepted.</param>
            <param name="lists">Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CallLists(System.Int32,SharpGL.Enumerations.DataType,System.IntPtr)">
            <summary>
            Execute	a list of display lists.
            </summary>
            <param name="n">Specifies the number of display lists to be executed.</param>
            <param name="type">Specifies the type of values in lists. Symbolic constants OpenGL.BYTE, OpenGL.UNSIGNED_BYTE, OpenGL.SHORT, OpenGL.UNSIGNED_SHORT, OpenGL.INT, OpenGL.UNSIGNED_INT, OpenGL.FLOAT, OpenGL.2_BYTES, OpenGL.3_BYTES and OpenGL.4_BYTES are accepted.</param>
            <param name="lists">Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CallLists(System.Int32,System.Byte[])">
            <summary>
            Execute	a list of display lists. Automatically uses the GL_UNSIGNED_BYTE version of the function.
            </summary>
            <param name="n">The number of lists.</param>
            <param name="lists">The lists.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CallLists(System.Int32,System.UInt32[])">
            <summary>
            Execute	a list of display lists. Automatically uses the GL_UNSIGNED_INT version of the function.
            </summary>
            <param name="n">The number of lists.</param>
            <param name="lists">The lists.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Clear(System.UInt32)">
            <summary>
            This function clears the buffers specified by mask.
            </summary>
            <param name="mask">Which buffers to clear.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClearAccum(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify clear values for the accumulation buffer.
            </summary>
            <param name="red">Specify the red, green, blue and alpha values used when the accumulation buffer is cleared. The initial values are all 0.</param>
            <param name="green">Specify the red, green, blue and alpha values used when the accumulation buffer is cleared. The initial values are all 0.</param>
            <param name="blue">Specify the red, green, blue and alpha values used when the accumulation buffer is cleared. The initial values are all 0.</param>
            <param name="alpha">Specify the red, green, blue and alpha values used when the accumulation buffer is cleared. The initial values are all 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This function sets the color that the drawing buffer is 'cleared' to.
            </summary>
            <param name="red">Red component of the color (between 0 and 1).</param>
            <param name="green">Green component of the color (between 0 and 1).</param>
            <param name="blue">Blue component of the color (between 0 and 1)./</param>
            <param name="alpha">Alpha component of the color (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClearDepth(System.Double)">
            <summary>
            Specify the clear value for the depth buffer.
            </summary>
            <param name="depth">Specifies the depth value used	when the depth buffer is cleared. The initial value is 1.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClearIndex(System.Single)">
            <summary>
            Specify the clear value for the color index buffers.
            </summary>
            <param name="c">Specifies the index used when the color index buffers are cleared. The initial value is 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClearStencil(System.Int32)">
            <summary>
            Specify the clear value for the stencil buffer.
            </summary>
            <param name="s">Specifies the index used when the stencil buffer is cleared. The initial value is 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClipPlane(System.UInt32,System.Double[])">
            <summary>
            Specify a plane against which all geometry is clipped.
            </summary>
            <param name="plane">Specifies which clipping plane is being positioned. Symbolic names of the form OpenGL.CLIP_PLANEi, where i is an integer between 0 and OpenGL.MAX_CLIP_PLANES -1, are accepted.</param>
            <param name="equation">Specifies the address of an	array of four double-precision floating-point values. These values are interpreted as a plane equation.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ClipPlane(SharpGL.Enumerations.ClipPlaneName,System.Double[])">
            <summary>
            Specify a plane against which all geometry is clipped.
            </summary>
            <param name="plane">Specifies which clipping plane is being positioned. Symbolic names of the form OpenGL.CLIP_PLANEi, where i is an integer between 0 and OpenGL.MAX_CLIP_PLANES -1, are accepted.</param>
            <param name="equation">Specifies the address of an	array of four double-precision floating-point values. These values are interpreted as a plane equation.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 255).</param>
            <param name="green">Green color component (between 0 and 255).</param>
            <param name="blue">Blue color component (between 0 and 255).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 255).</param>
            <param name="green">Green color component (between 0 and 255).</param>
            <param name="blue">Blue color component (between 0 and 255).</param>
            <param name="alpha">Alpha color component (between 0 and 255).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Double,System.Double,System.Double)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
            <param name="alpha">Alpha color component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Single,System.Single,System.Single)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Single[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 float values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Int32[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 int values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Int16[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 int values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Double[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 double values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Byte[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 byte values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.UInt32[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 unsigned int values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.UInt16[])">
            <summary>
            Sets the current color to 'v'.
            </summary>
            <param name="v">An array of either 3 or 4 unsigned short values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
            <param name="alpha">Alpha color component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
            <param name="alpha">Alpha color component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
            <param name="alpha">Alpha color component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
            <param name="alpha">Alpha color component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Color(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the current color.
            </summary>
            <param name="red">Red color component (between 0 and 1).</param>
            <param name="green">Green color component (between 0 and 1).</param>
            <param name="blue">Blue color component (between 0 and 1).</param>
            <param name="alpha">Alpha color component (between 0 and 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.ColorMask(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            This function sets the current colour mask.
            </summary>
            <param name="red">Red component mask.</param>
            <param name="green">Green component mask.</param>
            <param name="blue">Blue component mask.</param>
            <param name="alpha">Alpha component mask.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ColorMaterial(System.UInt32,System.UInt32)">
            <summary>
            Cause a material color to track the current color.
            </summary>
            <param name="face">Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are OpenGL.FRONT, OpenGL.BACK, and OpenGL.FRONT_AND_BACK. The initial value is OpenGL.FRONT_AND_BACK.</param>
            <param name="mode">Specifies which	of several material parameters track the current color. Accepted values are	OpenGL.EMISSION, OpenGL.AMBIENT, OpenGL.DIFFUSE, OpenGL.SPECULAR and OpenGL.AMBIENT_AND_DIFFUSE. The initial value is OpenGL.AMBIENT_AND_DIFFUSE.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ColorPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of colors.
            </summary>
            <param name="size">Specifies the number	of components per color. Must be 3	or 4.</param>
            <param name="type">Specifies the data type of each color component in the array. Symbolic constants OpenGL.BYTE, OpenGL.UNSIGNED_BYTE, OpenGL.SHORT, OpenGL.UNSIGNED_SHORT, OpenGL.INT, OpenGL.UNSIGNED_INT, OpenGL.FLOAT and OpenGL.DOUBLE are accepted.</param>
            <param name="stride">Specifies the byte offset between consecutive colors. If stride is 0, (the initial value), the colors are understood to be tightly packed in the array.</param>
            <param name="pointer">Specifies a pointer to the first component of the first color element in the array.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CopyPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copy pixels in	the frame buffer.
            </summary>
            <param name="x">Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.</param>
            <param name="width">Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.</param>
            <param name="height">Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.</param>
            <param name="type">Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants OpenGL.COLOR, OpenGL.DEPTH, and OpenGL.STENCIL are accepted.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CopyTexImage1D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 1D texture image.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_1D.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the internal format of the texture.</param>
            <param name="x">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture image. Must be 0 or 2^n = (2 * border) for some integer n. The height of the texture image is 1.</param>
            <param name="border">Specifies the width of the border. Must be either 0 or 1.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CopyTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a	2D texture image.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_2D.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the internal format of the texture.</param>
            <param name="x">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture image.</param>
            <param name="height">Specifies the height of the texture image.</param>
            <param name="border">Specifies the width of the border. Must be either 0 or 1.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CopyTexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a one-dimensional texture subimage.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_1D.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xoffset">Specifies the texel offset within the texture array.</param>
            <param name="x">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture image.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CopyTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a two-dimensional texture subimage.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_2D.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xoffset">Specifies the texel offset within the texture array.</param>
            <param name="yoffset">Specifies the texel offset within the texture array.</param>
            <param name="x">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture image.</param>
            <param name="height">Specifies the height of the texture image.</param>
        </member>
        <member name="M:SharpGL.OpenGL.CullFace(System.UInt32)">
            <summary>
            Specify whether front- or back-facing facets can be culled.
            </summary>
            <param name="mode">Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants OpenGL.FRONT, OpenGL.BACK, and OpenGL.FRONT_AND_BACK are accepted. The initial	value is OpenGL.BACK.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Cylinder(System.IntPtr,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            This function draws a sphere from the quadric object.
            </summary>
            <param name="qobj">The quadric object.</param>
            <param name="baseRadius">Radius at the base.</param>
            <param name="topRadius">Radius at the top.</param>
            <param name="height">Height of cylinder.</param>
            <param name="slices">Cylinder slices.</param>
            <param name="stacks">Cylinder stacks.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DeleteLists(System.UInt32,System.Int32)">
            <summary>
            This function deletes a list, or a range of lists.
            </summary>
            <param name="list">The list to delete.</param>
            <param name="range">The range of lists (often just 1).</param>
        </member>
        <member name="M:SharpGL.OpenGL.DeleteNurbsRenderer(System.IntPtr)">
            <summary>
            This function deletes the underlying glu nurbs renderer.
            </summary>
            <param name="nurbsObject">The pointer to the nurbs object.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DeleteTextures(System.Int32,System.UInt32[])">
            <summary>
            This function deletes a set of Texture objects.
            </summary>
            <param name="n">Number of textures to delete.</param>
            <param name="textures">The array containing the names of the textures to delete.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DeleteQuadric(System.IntPtr)">
            <summary>
            Call this function to delete an OpenGL Quadric object.
            </summary>
            <param name="quadric"></param>
        </member>
        <member name="M:SharpGL.OpenGL.DepthFunc(System.UInt32)">
            <summary>
            This function sets the current depth buffer comparison function, the default it LESS.
            </summary>
            <param name="func">The comparison function to set.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DepthFunc(SharpGL.Enumerations.DepthFunction)">
            <summary>
            This function sets the current depth buffer comparison function, the default it LESS.
            </summary>
            <param name="function">The comparison function to set.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DepthMask(System.Byte)">
            <summary>
            This function sets the depth mask.
            </summary>
            <param name="flag">The depth mask flag, normally 1.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DepthRange(System.Double,System.Double)">
            <summary>
            Specify mapping of depth values from normalized device coordinates	to window coordinates.
            </summary>
            <param name="zNear">Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.</param>
            <param name="zFar">Specifies the mapping of the near clipping plane to window coordinates. The initial value is 1.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Disable(System.UInt32)">
            <summary>
            Call this function to disable an OpenGL capability.
            </summary>
            <param name="cap">The capability to disable.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DisableClientState(System.UInt32)">
            <summary>
            This function disables a client state array, such as a vertex array.
            </summary>
            <param name="array">The array to disable.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawArrays(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Render	primitives from	array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render. Symbolic constants OpenGL.POINTS, OpenGL.LINE_STRIP, OpenGL.LINE_LOOP, OpenGL.LINES, OpenGL.TRIANGLE_STRIP, OpenGL.TRIANGLE_FAN, OpenGL.TRIANGLES, OpenGL.QUAD_STRIP, OpenGL.QUADS, and OpenGL.POLYGON are accepted.</param>
            <param name="first">Specifies the starting	index in the enabled arrays.</param>
            <param name="count">Specifies the number of indices to be rendered.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawBuffer(System.UInt32)">
            <summary>
            Specify which color buffers are to be drawn into.
            </summary>
            <param name="mode">Specifies up to	four color buffers to be drawn into. Symbolic constants OpenGL.NONE, OpenGL.FRONT_LEFT, OpenGL.FRONT_RIGHT,	OpenGL.BACK_LEFT, OpenGL.BACK_RIGHT, OpenGL.FRONT, OpenGL.BACK, OpenGL.LEFT, OpenGL.RIGHT, OpenGL.FRONT_AND_BACK, and OpenGL.AUXi, where i is between 0 and (OpenGL.AUX_BUFFERS - 1), are accepted (OpenGL.AUX_BUFFERS is not the upper limit; use glGet to query the number of	available aux buffers.)  The initial value is OpenGL.FRONT for single- buffered contexts, and OpenGL.BACK for double-buffered contexts.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawBuffer(SharpGL.Enumerations.DrawBufferMode)">
            <summary>
            Specify which color buffers are to be drawn into.
            </summary>
            <param name="drawBufferMode">Specifies up to	four color buffers to be drawn into.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawElements(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to	render. Symbolic constants OpenGL.POINTS, OpenGL.LINE_STRIP, OpenGL.LINE_LOOP, OpenGL.LINES, OpenGL.TRIANGLE_STRIP, OpenGL.TRIANGLE_FAN, OpenGL.TRIANGLES, OpenGL.QUAD_STRIP, OpenGL.QUADS, and OpenGL.POLYGON are accepted.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawElements(System.UInt32,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to	render. Symbolic constants OpenGL.POINTS, OpenGL.LINE_STRIP, OpenGL.LINE_LOOP, OpenGL.LINES, OpenGL.TRIANGLE_STRIP, OpenGL.TRIANGLE_FAN, OpenGL.TRIANGLES, OpenGL.QUAD_STRIP, OpenGL.QUADS, and OpenGL.POLYGON are accepted.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">Specifies the type of the values in indices.	Must be one of OpenGL.UNSIGNED_BYTE, OpenGL.UNSIGNED_SHORT, or OpenGL.UNSIGNED_INT.</param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawPixels(System.Int32,System.Int32,System.UInt32,System.Single[])">
            <summary>
            Draws a rectangle of pixel data at the current raster position.
            </summary>
            <param name="width">Width of pixel data.</param>
            <param name="height">Height of pixel data.</param>
            <param name="format">Format of pixel data.</param>
            <param name="pixels">Pixel data buffer.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawPixels(System.Int32,System.Int32,System.UInt32,System.UInt32[])">
            <summary>
            Draws a rectangle of pixel data at the current raster position.
            </summary>
            <param name="width">Width of pixel data.</param>
            <param name="height">Height of pixel data.</param>
            <param name="format">Format of pixel data.</param>
            <param name="pixels">Pixel data buffer.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawPixels(System.Int32,System.Int32,System.UInt32,System.UInt16[])">
            <summary>
            Draws a rectangle of pixel data at the current raster position.
            </summary>
            <param name="width">Width of pixel data.</param>
            <param name="height">Height of pixel data.</param>
            <param name="format">Format of pixel data.</param>
            <param name="pixels">Pixel data buffer.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawPixels(System.Int32,System.Int32,System.UInt32,System.Byte[])">
            <summary>
            Draws a rectangle of pixel data at the current raster position.
            </summary>
            <param name="width">Width of pixel data.</param>
            <param name="height">Height of pixel data.</param>
            <param name="format">Format of pixel data.</param>
            <param name="pixels">Pixel data buffer.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawPixels(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Draws a rectangle of pixel data at the current raster position.
            </summary>
            <param name="width">Width of pixel data.</param>
            <param name="height">Height of pixel data.</param>
            <param name="format">Format of pixel data.</param>
            <param name="type">The GL data type.</param>
            <param name="pixels">Pixel data buffer.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EdgeFlag(System.Byte)">
            <summary>
            Flag edges as either boundary or nonboundary.
            </summary>
            <param name="flag">Specifies the current edge flag	value, either OpenGL.TRUE or OpenGL.FALSE. The initial value is OpenGL.TRUE.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EdgeFlagPointer(System.Int32,System.Int32[])">
            <summary>
            Define an array of edge flags.
            </summary>
            <param name="stride">Specifies the byte offset between consecutive edge flags. If stride is	0 (the initial value), the edge	flags are understood to	be tightly packed in the array.</param>
            <param name="pointer">Specifies a pointer to the first edge flag in the array.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EdgeFlag(System.Byte[])">
            <summary>
            Flag edges as either boundary or nonboundary.
            </summary>
            <param name="flag">Specifies a pointer to an array that contains a single boolean element,	which replaces the current edge	flag value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Enable(System.UInt32)">
            <summary>
            Call this function to enable an OpenGL capability.
            </summary>
            <param name="cap">The capability you wish to enable.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EnableClientState(System.UInt32)">
            <summary>
            This function enables one of the client state arrays, such as a vertex array.
            </summary>
            <param name="array">The array to enable.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EnableIf(System.UInt32,System.Boolean)">
            <summary>
            This is not an imported OpenGL function, but very useful. If 'test' is
            true, cap is enabled, otherwise, it's disable.
            </summary>
            <param name="cap">The capability you want to enable.</param>
            <param name="test">The logical comparison.</param>
        </member>
        <member name="M:SharpGL.OpenGL.End">
            <summary>
            Signals the End of drawing.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.EndCurve(System.IntPtr)">
            <summary>
            This function ends the drawing of a NURBS curve.
            </summary>
            <param name="nurbsObject">The nurbs object.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EndList">
            <summary>
            Ends the current display list compilation.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.EndSurface(System.IntPtr)">
            <summary>
            This function ends the drawing of a NURBS surface.
            </summary>
            <param name="nurbsObject">The nurbs object.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord1(System.Double)">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord1(System.Double[])">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord1(System.Single)">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord1(System.Single[])">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord2(System.Double,System.Double)">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
            <param name="v">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord2(System.Double[])">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord2(System.Single,System.Single)">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
            <param name="v">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalCoord2(System.Single[])">
            <summary>
            Evaluate from the current evaluator.
            </summary>
            <param name="u">Domain coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalMesh1(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Evaluates a 'mesh' from the current evaluators.
            </summary>
            <param name="mode">Drawing mode, can be POINT or LINE.</param>
            <param name="i1">Beginning of range.</param>
            <param name="i2">End of range.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalMesh2(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evaluates a 'mesh' from the current evaluators.
            </summary>
            <param name="mode">Drawing mode, fill, point or line.</param>
            <param name="i1">Beginning of range.</param>
            <param name="i2">End of range.</param>
            <param name="j1">Beginning of range.</param>
            <param name="j2">End of range.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalPoint1(System.Int32)">
            <summary>
            Generate and evaluate a single point in a mesh.
            </summary>
            <param name="i">The integer value for grid domain variable i.</param>
        </member>
        <member name="M:SharpGL.OpenGL.EvalPoint2(System.Int32,System.Int32)">
            <summary>
            Generate and evaluate a single point in a mesh.
            </summary>
            <param name="i">The integer value for grid domain variable i.</param>
            <param name="j">The integer value for grid domain variable j.</param>
        </member>
        <member name="M:SharpGL.OpenGL.FeedbackBuffer(System.Int32,System.UInt32,System.Single[])">
            <summary>
            This function sets the feedback buffer, that will receive feedback data.
            </summary>
            <param name="size">Size of the buffer.</param>
            <param name="type">Type of data in the buffer.</param>
            <param name="buffer">The buffer itself.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Finish">
            <summary>
            This function is similar to flush, but in a sense does it more, as it
            executes all commands aon both the client and the server.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.Flush">
            <summary>
            This forces OpenGL to execute any commands you have given it.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.Fog(System.UInt32,System.Single)">
            <summary>
            Sets a fog parameter.
            </summary>
            <param name="pname">The parameter to set.</param>
            <param name="param">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Fog(System.UInt32,System.Single[])">
            <summary>
            Sets a fog parameter.
            </summary>
            <param name="pname">The parameter to set.</param>
            <param name="parameters">The values to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Fog(System.UInt32,System.Int32)">
            <summary>
            Sets a fog parameter.
            </summary>
            <param name="pname">The parameter to set.</param>
            <param name="param">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Fog(System.UInt32,System.Int32[])">
            <summary>
            Sets a fog parameter.
            </summary>
            <param name="pname">The parameter to set.</param>
            <param name="parameters">The values to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.FrontFace(System.UInt32)">
            <summary>
            This function sets what defines a front face.
            </summary>
            <param name="mode">Winding mode, counter clockwise by default.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function creates a frustrum transformation and mulitplies it to the current
            matrix (which in most cases should be the projection matrix).
            </summary>
            <param name="left">Left clip position.</param>
            <param name="right">Right clip position.</param>
            <param name="bottom">Bottom clip position.</param>
            <param name="top">Top clip position.</param>
            <param name="zNear">Near clip position.</param>
            <param name="zFar">Far clip position.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GenLists(System.Int32)">
            <summary>
            This function generates 'range' number of contiguos display list indices.
            </summary>
            <param name="range">The number of lists to generate.</param>
            <returns>The first list.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.GenTextures(System.Int32,System.UInt32[])">
            <summary>
            Create a set of unique texture names.
            </summary>
            <param name="n">Number of names to create.</param>
            <param name="textures">Array to store the texture names.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetBooleanv(System.UInt32,System.Byte[])">
            <summary>
            This function queries OpenGL for data, and puts it in the buffer supplied.
            </summary>
            <param name="pname">The parameter to query.</param>
            <param name="parameters"></param>
        </member>
        <member name="M:SharpGL.OpenGL.GetBooleanv(SharpGL.Enumerations.GetTarget,System.Byte[])">
            <summary>
            This function queries OpenGL for data, and puts it in the buffer supplied.
            </summary>
            <param name="pname">The parameter to query.</param>
            <param name="parameters"></param>
        </member>
        <member name="M:SharpGL.OpenGL.GetClipPlane(System.UInt32,System.Double[])">
            <summary>
            Return the coefficients of the specified clipping plane.
            </summary>
            <param name="plane">Specifies a	clipping plane.	 The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form OpenGL.CLIP_PLANEi where 0 Less Than i Less Than OpenGL.MAX_CLIP_PLANES.</param>
            <param name="equation">Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetDouble(System.UInt32,System.Double[])">
            <summary>
            This function queries OpenGL for data, and puts it in the buffer supplied.
            </summary>
            <param name="pname">The parameter to query.</param>
            <param name="parameters">The buffer to put that data into.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetDouble(SharpGL.Enumerations.GetTarget,System.Double[])">
            <summary>
            This function queries OpenGL for data, and puts it in the buffer supplied.
            </summary>
            <param name="pname">The parameter to query.</param>
            <param name="parameters">The buffer to put that data into.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetError">
            <summary>
            Get the current OpenGL error code.
            </summary>
            <returns>The current OpenGL error code.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.GetErrorCode">
            <summary>
            Get the current OpenGL error code.
            </summary>
            <returns>The current OpenGL error code.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.GetFloat(System.UInt32,System.Single[])">
            <summary>
            This this function to query OpenGL values.
            </summary>
            <param name="pname">The parameter to query.</param>
            <param name="parameters">The parameters</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetFloat(SharpGL.Enumerations.GetTarget,System.Single[])">
            <summary>
            This this function to query OpenGL values.
            </summary>
            <param name="pname">The parameter to query.</param>
            <param name="parameters">The parameters</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetInteger(System.UInt32,System.Int32[])">
            <summary>
            Use this function to query OpenGL parameter values.
            </summary>
            <param name="pname">The Parameter to query</param>
            <param name="parameters">An array to put the values into.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetInteger(SharpGL.Enumerations.GetTarget,System.Int32[])">
            <summary>
            Use this function to query OpenGL parameter values.
            </summary>
            <param name="pname">The Parameter to query</param>
            <param name="parameters">An array to put the values into.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetLight(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return light source parameter values.
            </summary>
            <param name="light">Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form OpenGL.LIGHTi where i ranges from 0 to the value of OpenGL.GL_MAX_LIGHTS - 1.</param>
            <param name="pname">Specifies a light source parameter for light.</param>
            <param name="parameters">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetLight(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return light source parameter values.
            </summary>
            <param name="light">Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form OpenGL.LIGHTi where i ranges from 0 to the value of OpenGL.GL_MAX_LIGHTS - 1.</param>
            <param name="pname">Specifies a light source parameter for light.</param>
            <param name="parameters">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMap(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Return evaluator parameters.
            </summary>
            <param name="target">Specifies the symbolic name of a map.</param>
            <param name="query">Specifies which parameter to return.</param>
            <param name="v">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMap(SharpGL.Enumerations.GetMapTarget,System.UInt32,System.Double[])">
            <summary>
            Return evaluator parameters.
            </summary>
            <param name="target">Specifies the symbolic name of a map.</param>
            <param name="query">Specifies which parameter to return.</param>
            <param name="v">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMap(SharpGL.Enumerations.GetMapTarget,System.UInt32,System.Single[])">
            <summary>
            Return evaluator parameters.
            </summary>
            <param name="target">Specifies the symbolic name of a map.</param>
            <param name="query">Specifies which parameter to return.</param>
            <param name="v">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMap(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return evaluator parameters.
            </summary>
            <param name="target">Specifies the symbolic name of a map.</param>
            <param name="query">Specifies which parameter to return.</param>
            <param name="v">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMap(SharpGL.Enumerations.GetMapTarget,System.UInt32,System.Int32[])">
            <summary>
            Return evaluator parameters.
            </summary>
            <param name="target">Specifies the symbolic name of a map.</param>
            <param name="query">Specifies which parameter to return.</param>
            <param name="v">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMap(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return evaluator parameters.
            </summary>
            <param name="target">Specifies the symbolic name of a map.</param>
            <param name="query">Specifies which parameter to return.</param>
            <param name="v">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMaterial(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return material parameters.
            </summary>
            <param name="face">Specifies which of the two materials is being queried. OpenGL.FRONT or OpenGL.BACK are accepted, representing the front and back materials, respectively.</param>
            <param name="pname">Specifies the material parameter to return.</param>
            <param name="parameters">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetMaterial(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return material parameters.
            </summary>
            <param name="face">Specifies which of the two materials is being queried. OpenGL.FRONT or OpenGL.BACK are accepted, representing the front and back materials, respectively.</param>
            <param name="pname">Specifies the material parameter to return.</param>
            <param name="parameters">Returns the requested data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetPixelMap(System.UInt32,System.Single[])">
            <summary>
            Return the specified pixel map.
            </summary>
            <param name="map">Specifies the	name of	the pixel map to return.</param>
            <param name="values">Returns the pixel map	contents.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetPixelMap(System.UInt32,System.UInt32[])">
            <summary>
            Return the specified pixel map.
            </summary>
            <param name="map">Specifies the	name of	the pixel map to return.</param>
            <param name="values">Returns the pixel map	contents.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetPixelMap(System.UInt32,System.UInt16[])">
            <summary>
            Return the specified pixel map.
            </summary>
            <param name="map">Specifies the	name of	the pixel map to return.</param>
            <param name="values">Returns the pixel map	contents.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetPointerv(System.UInt32,System.Int32[])">
            <summary>
            Return the address of the specified pointer.
            </summary>
            <param name="pname">Specifies the array or buffer pointer to be returned.</param>
            <param name="parameters">Returns the pointer value specified by parameters.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetPolygonStipple(System.Byte[])">
            <summary>
            Return the polygon stipple pattern.
            </summary>
            <param name="mask">Returns the stipple pattern. The initial value is all 1's.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetString(System.UInt32)">
            <summary>
            Return a string	describing the current GL connection.
            </summary>
            <param name="name">Specifies a symbolic constant, one of OpenGL.VENDOR, OpenGL.RENDERER, OpenGL.VERSION, or OpenGL.EXTENSIONS.</param>
            <returns>Pointer to the specified string.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexEnv(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return texture environment parameters.
            </summary>
            <param name="target">Specifies a texture environment.  Must be OpenGL.TEXTURE_ENV.</param>
            <param name="pname">Specifies the	symbolic name of a texture environment parameter.  Accepted values are OpenGL.TEXTURE_ENV_MODE, and OpenGL.TEXTURE_ENV_COLOR.</param>
            <param name="parameters">Returns the requested	data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexEnv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return texture environment parameters.
            </summary>
            <param name="target">Specifies a texture environment.  Must be OpenGL.TEXTURE_ENV.</param>
            <param name="pname">Specifies the	symbolic name of a texture environment parameter.  Accepted values are OpenGL.TEXTURE_ENV_MODE, and OpenGL.TEXTURE_ENV_COLOR.</param>
            <param name="parameters">Returns the requested	data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexGen(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function. Must be OpenGL.TEXTURE_GEN_MODE.</param>
            <param name="parameters">Specifies a single-valued texture generation parameter, one of OpenGL.OBJECT_LINEAR, OpenGL.EYE_LINEAR, or OpenGL.SPHERE_MAP.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexGen(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function. Must be OpenGL.TEXTURE_GEN_MODE.</param>
            <param name="parameters">Specifies a single-valued texture generation parameter, one of OpenGL.OBJECT_LINEAR, OpenGL.EYE_LINEAR, or OpenGL.SPHERE_MAP.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexGen(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function. Must be OpenGL.TEXTURE_GEN_MODE.</param>
            <param name="parameters">Specifies a single-valued texture generation parameter, one of OpenGL.OBJECT_LINEAR, OpenGL.EYE_LINEAR, or OpenGL.SPHERE_MAP.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return a texture image.
            </summary>
            <param name="target">Specifies which texture is to	be obtained. OpenGL.TEXTURE_1D and OpenGL.TEXTURE_2D are accepted.</param>
            <param name="level">Specifies the level-of-detail number of the desired image.  Level	0 is the base image level.  Level n is the nth mipmap reduction image.</param>
            <param name="format">Specifies a pixel format for the returned data.</param>
            <param name="type">Specifies a pixel type for the returned data.</param>
            <param name="pixels">Returns the texture image.  Should be	a pointer to an array of the type specified by type.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Single[])">
            <summary>
            Return texture parameter values for a specific level of detail.
            </summary>
            <param name="target">Specifies the	symbolic name of the target texture.</param>
            <param name="level">Specifies the level-of-detail	number of the desired image.  Level	0 is the base image level.  Level n is the nth mipmap reduction image.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="parameters">Returns the requested	data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Int32[])">
            <summary>
            Return texture parameter values for a specific level of detail.
            </summary>
            <param name="target">Specifies the	symbolic name of the target texture.</param>
            <param name="level">Specifies the level-of-detail	number of the desired image.  Level	0 is the base image level.  Level n is the nth mipmap reduction image.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="parameters">Returns the requested	data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return texture parameter values.
            </summary>
            <param name="target">Specifies the symbolic name of the target texture.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="parameters">Returns the texture parameters.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTexParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return texture parameter values.
            </summary>
            <param name="target">Specifies the symbolic name of the target texture.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="parameters">Returns the texture parameters.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Hint(System.UInt32,System.UInt32)">
            <summary>
            Specify implementation-specific hints.
            </summary>
            <param name="target">Specifies a symbolic constant indicating the behavior to be controlled.</param>
            <param name="mode">Specifies a symbolic constant indicating the desired behavior.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Hint(SharpGL.Enumerations.HintTarget,SharpGL.Enumerations.HintMode)">
            <summary>
            Specify implementation-specific hints.
            </summary>
            <param name="target">Specifies a symbolic constant indicating the behavior to be controlled.</param>
            <param name="mode">Specifies a symbolic constant indicating the desired behavior.</param>
        </member>
        <member name="M:SharpGL.OpenGL.IndexMask(System.UInt32)">
            <summary>
            Control	the writing of individual bits in the color	index buffers.
            </summary>
            <param name="mask">Specifies a bit	mask to	enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.</param>
        </member>
        <member name="M:SharpGL.OpenGL.IndexPointer(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            Define an array of color indexes.
            </summary>
            <param name="type">Specifies the data type of each color index in the array.  Symbolic constants OpenGL.UNSIGNED_BYTE, OpenGL.SHORT, OpenGL.INT, OpenGL.FLOAT, and OpenGL.DOUBLE are accepted.</param>
            <param name="stride">Specifies the byte offset between consecutive color indexes.  If stride is 0 (the initial value), the color indexes are understood	to be tightly packed in the array.</param>
            <param name="pointer">Specifies a pointer to the first index in the array.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Double)">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Double[])">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Single)">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Single[])">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Int32)">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Int32[])">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Int16)">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Int16[])">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Byte)">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Index(System.Byte[])">
            <summary>
            Set the current color index.
            </summary>
            <param name="c">Specifies the new value for the current color index.</param>
        </member>
        <member name="M:SharpGL.OpenGL.InitNames">
            <summary>
            This function initialises the select buffer names.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.InterleavedArrays(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            Simultaneously specify and enable several interleaved arrays.
            </summary>
            <param name="format">Specifies the type of array to enable.</param>
            <param name="stride">Specifies the offset in bytes between each aggregate array element.</param>
            <param name="pointer">The array.</param>
        </member>
        <member name="M:SharpGL.OpenGL.IsEnabled(System.UInt32)">
            <summary>
            Use this function to query if a certain OpenGL function is enabled or not.
            </summary>
            <param name="cap">The capability to test.</param>
            <returns>True if the capability is enabled, otherwise, false.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.IsList(System.UInt32)">
            <summary>
            This function determines whether a specified value is a display list.
            </summary>
            <param name="list">The value to test.</param>
            <returns>TRUE if it is a list, FALSE otherwise.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.IsTexture(System.UInt32)">
            <summary>
            Determine if a name corresponds	to a texture.
            </summary>
            <param name="texture">Specifies a value that may be the name of a texture.</param>
            <returns>True if texture is a texture object.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(System.UInt32,System.Single)">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="param">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(SharpGL.Enumerations.LightModelParameter,System.Single)">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="param">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(System.UInt32,System.Single[])">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="parameters">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(SharpGL.Enumerations.LightModelParameter,System.Single[])">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="parameters">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(System.UInt32,System.Int32)">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="param">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(SharpGL.Enumerations.LightModelParameter,System.Int32)">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="param">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(System.UInt32,System.Int32[])">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="parameters">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LightModel(SharpGL.Enumerations.LightModelParameter,System.Int32[])">
            <summary>
            This function sets a parameter of the lighting model.
            </summary>
            <param name="pname">The name of the parameter.</param>
            <param name="parameters">The parameter to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="param">The value that you want to set the parameter to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(SharpGL.Enumerations.LightName,SharpGL.Enumerations.LightParameter,System.Single)">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="param">The value that you want to set the parameter to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="parameters">The value that you want to set the parameter to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(SharpGL.Enumerations.LightName,SharpGL.Enumerations.LightParameter,System.Single[])">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="parameters">The value that you want to set the parameter to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="param">The value that you want to set the parameter to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(SharpGL.Enumerations.LightName,SharpGL.Enumerations.LightParameter,System.Int32)">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="param">The value that you want to set the parameter to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Light(SharpGL.Enumerations.LightName,SharpGL.Enumerations.LightParameter,System.Int32[])">
            <summary>
            Set the parameter (pname) of the light 'light'.
            </summary>
            <param name="light">The light you wish to set parameters for.</param>
            <param name="pname">The parameter you want to set.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LineStipple(System.Int32,System.UInt16)">
            <summary>
            Specify the line stipple pattern.
            </summary>
            <param name="factor">Specifies a multiplier for each bit in the line stipple pattern.  If factor is 3, for example, each bit in the pattern is used three times before the next	bit in the pattern is used. factor is clamped to the range	[1, 256] and defaults to 1.</param>
            <param name="pattern">Specifies a 16-bit integer whose bit	pattern determines which fragments of a line will be drawn when	the line is rasterized.	 Bit zero is used first; the default pattern is all 1's.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LineWidth(System.Single)">
            <summary>
            Set's the current width of lines.
            </summary>
            <param name="width">New line width to set.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ListBase(System.UInt32)">
            <summary>
            Set the display-list base for glCallLists.
            </summary>
            <param name="listbase">Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LoadIdentity">
            <summary>
            Call this function to load the identity matrix into the current matrix stack.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.LoadMatrix(System.Double[])">
            <summary>
            Replace the current matrix with the specified matrix.
            </summary>
            <param name="m">Specifies a pointer to 16 consecutive values, which are used as the elements of a 4x4 column-major matrix.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LoadMatrixf(System.Single[])">
            <summary>
            Replace the current matrix with the specified matrix.
            </summary>
            <param name="m">Specifies a pointer to 16 consecutive values, which are used as the elements of a 4x4 column-major matrix.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LoadName(System.UInt32)">
            <summary>
            This function replaces the name at the top of the selection names stack
            with 'name'.
            </summary>
            <param name="name">The name to replace it with.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LogicOp(System.UInt32)">
            <summary>
            Specify a logical pixel operation for color index rendering.
            </summary>
            <param name="opcode">Specifies a symbolic constant	that selects a logical operation.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LogicOp(SharpGL.Enumerations.LogicOp)">
            <summary>
            Specify a logical pixel operation for color index rendering.
            </summary>
            <param name="logicOp">Specifies a symbolic constant	that selects a logical operation.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LookAt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function transforms the projection matrix so that it looks at a certain
            point, from a certain point.
            </summary>
            <param name="eyex">Position of the eye.</param>
            <param name="eyey">Position of the eye.</param>
            <param name="eyez">Position of the eye.</param>
            <param name="centerx">Point to look at.</param>
            <param name="centery">Point to look at.</param>
            <param name="centerz">Point to look at.</param>
            <param name="upx">'Up' Vector X Component.</param>
            <param name="upy">'Up' Vector Y Component.</param>
            <param name="upz">'Up' Vector Z Component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Map1(System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            Defines a 1D evaluator.
            </summary>
            <param name="target">What the control points represent (e.g. MAP1_VERTEX_3).</param>
            <param name="u1">Range of the variable 'u'.</param>
            <param name="u2">Range of the variable 'u'.</param>
            <param name="stride">Offset between beginning of one control point, and beginning of next.</param>
            <param name="order">The degree plus one, should agree with the number of control points.</param>
            <param name="points">The data for the points.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Map1(System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            Defines a 1D evaluator.
            </summary>
            <param name="target">What the control points represent (e.g. MAP1_VERTEX_3).</param>
            <param name="u1">Range of the variable 'u'.</param>
            <param name="u2">Range of the variable 'u'.</param>
            <param name="stride">Offset between beginning of one control point, and beginning of next.</param>
            <param name="order">The degree plus one, should agree with the number of control points.</param>
            <param name="points">The data for the points.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Map2(System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            Defines a 2D evaluator.
            </summary>
            <param name="target">What the control points represent (e.g. MAP2_VERTEX_3).</param>
            <param name="u1">Range of the variable 'u'.</param>
            <param name="u2">Range of the variable 'u.</param>
            <param name="ustride">Offset between beginning of one control point and the next.</param>
            <param name="uorder">The degree plus one.</param>
            <param name="v1">Range of the variable 'v'.</param>
            <param name="v2">Range of the variable 'v'.</param>
            <param name="vstride">Offset between beginning of one control point and the next.</param>
            <param name="vorder">The degree plus one.</param>
            <param name="points">The data for the points.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Map2(System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            Defines a 2D evaluator.
            </summary>
            <param name="target">What the control points represent (e.g. MAP2_VERTEX_3).</param>
            <param name="u1">Range of the variable 'u'.</param>
            <param name="u2">Range of the variable 'u.</param>
            <param name="ustride">Offset between beginning of one control point and the next.</param>
            <param name="uorder">The degree plus one.</param>
            <param name="v1">Range of the variable 'v'.</param>
            <param name="v2">Range of the variable 'v'.</param>
            <param name="vstride">Offset between beginning of one control point and the next.</param>
            <param name="vorder">The degree plus one.</param>
            <param name="points">The data for the points.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MapGrid1(System.Int32,System.Double,System.Double)">
            <summary>
            This function defines a grid that goes from u1 to u1 in n steps, evenly spaced.
            </summary>
            <param name="un">Number of steps.</param>
            <param name="u1">Range of variable 'u'.</param>
            <param name="u2">Range of variable 'u'.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MapGrid1(System.Int32,System.Single,System.Single)">
            <summary>
            This function defines a grid that goes from u1 to u1 in n steps, evenly spaced.
            </summary>
            <param name="un">Number of steps.</param>
            <param name="u1">Range of variable 'u'.</param>
            <param name="u2">Range of variable 'u'.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MapGrid2(System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            This function defines a grid that goes from u1 to u1 in n steps, evenly spaced,
            and the same for v.
            </summary>
            <param name="un">Number of steps.</param>
            <param name="u1">Range of variable 'u'.</param>
            <param name="u2">Range of variable 'u'.</param>
            <param name="vn">Number of steps.</param>
            <param name="v1">Range of variable 'v'.</param>
            <param name="v2">Range of variable 'v'.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MapGrid2(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            This function defines a grid that goes from u1 to u1 in n steps, evenly spaced,
            and the same for v.
            </summary>
            <param name="un">Number of steps.</param>
            <param name="u1">Range of variable 'u'.</param>
            <param name="u2">Range of variable 'u'.</param>
            <param name="vn">Number of steps.</param>
            <param name="v1">Range of variable 'v'.</param>
            <param name="v2">Range of variable 'v'.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Material(System.UInt32,System.UInt32,System.Single)">
            <summary>
            This function sets a material parameter.
            </summary>
            <param name="face">What faces is this parameter for (i.e front/back etc).</param>
            <param name="pname">What parameter you want to set.</param>
            <param name="param">The value to set 'pname' to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Material(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            This function sets a material parameter.
            </summary>
            <param name="face">What faces is this parameter for (i.e front/back etc).</param>
            <param name="pname">What parameter you want to set.</param>
            <param name="parameters">The value to set 'pname' to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Material(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            This function sets a material parameter.
            </summary>
            <param name="face">What faces is this parameter for (i.e front/back etc).</param>
            <param name="pname">What parameter you want to set.</param>
            <param name="param">The value to set 'pname' to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Material(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            This function sets a material parameter.
            </summary>
            <param name="face">What faces is this parameter for (i.e front/back etc).</param>
            <param name="pname">What parameter you want to set.</param>
            <param name="parameters">The value to set 'pname' to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MatrixMode(System.UInt32)">
            <summary>
            Set the current matrix mode (the matrix that matrix operations will be 
            performed on).
            </summary>
            <param name="mode">The mode, normally PROJECTION or MODELVIEW.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MatrixMode(SharpGL.Enumerations.MatrixMode)">
            <summary>
            Set the current matrix mode (the matrix that matrix operations will be 
            performed on).
            </summary>
            <param name="mode">The mode, normally PROJECTION or MODELVIEW.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MultMatrix(System.Double[])">
            <summary>
            Multiply the current matrix with the specified matrix.
            </summary>
            <param name="m">Points to 16 consecutive values that are used as the elements of a 4x4 column-major matrix.</param>
        </member>
        <member name="M:SharpGL.OpenGL.MultMatrix(System.Single[])">
            <summary>
            Multiply the current matrix with the specified matrix.
            </summary>
            <param name="m">Points to 16 consecutive values that are used as the elements of a 4x4 column-major matrix.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NewList(System.UInt32,System.UInt32)">
            <summary>
            This function starts compiling a new display list.
            </summary>
            <param name="list">The list to compile.</param>
            <param name="mode">Either COMPILE or COMPILE_AND_EXECUTE.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NewNurbsRenderer">
            <summary>
            This function creates a new glu NURBS renderer object.
            </summary>
            <returns>A Pointer to the NURBS renderer.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.NewQuadric">
            <summary>
            This function creates a new OpenGL Quadric Object.
            </summary>
            <returns>The pointer to the Quadric Object.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the current normal.
            </summary>
            <param name="nx">Normal Coordinate.</param>
            <param name="ny">Normal Coordinate.</param>
            <param name="nz">Normal Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Byte[])">
            <summary>
            This function sets the current normal.
            </summary>
            <param name="v">The normal.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Double,System.Double,System.Double)">
            <summary>
            Set the current normal.
            </summary>
            <param name="nx">Normal Coordinate.</param>
            <param name="ny">Normal Coordinate.</param>
            <param name="nz">Normal Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Double[])">
            <summary>
            This function sets the current normal.
            </summary>
            <param name="v">The normal.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Single,System.Single,System.Single)">
            <summary>
            Set the current normal.
            </summary>
            <param name="nx">Normal Coordinate.</param>
            <param name="ny">Normal Coordinate.</param>
            <param name="nz">Normal Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Single[])">
            <summary>
            This function sets the current normal.
            </summary>
            <param name="v">The normal.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal3i(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current normal.
            </summary>
            <param name="nx">Normal Coordinate.</param>
            <param name="ny">Normal Coordinate.</param>
            <param name="nz">Normal Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Int32[])">
            <summary>
            This function sets the current normal.
            </summary>
            <param name="v">The normal.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current normal.
            </summary>
            <param name="nx">Normal Coordinate.</param>
            <param name="ny">Normal Coordinate.</param>
            <param name="nz">Normal Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Normal(System.Int16[])">
            <summary>
            This function sets the current normal.
            </summary>
            <param name="v">The normal.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NormalPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            Set's the pointer to the normal array.
            </summary>
            <param name="type">The type of data.</param>
            <param name="stride">The space in bytes between each normal.</param>
            <param name="pointer">The normals.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NormalPointer(System.UInt32,System.Int32,System.Single[])">
            <summary>
            Set's the pointer to the normal array.
            </summary>
            <param name="type">The type of data.</param>
            <param name="stride">The space in bytes between each normal.</param>
            <param name="pointer">The normals.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NurbsCurve(System.IntPtr,System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.UInt32)">
            <summary>
            This function defines a NURBS Curve.
            </summary>
            <param name="nurbsObject">The NURBS object.</param>
            <param name="knotsCount">The number of knots.</param>
            <param name="knots">The knots themselves.</param>
            <param name="stride">The stride, i.e. distance between vertices in the 
            control points array.</param>
            <param name="controlPointsArray">The array of control points.</param>
            <param name="order">The order of the polynomial.</param>
            <param name="type">The type of data to generate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NurbsProperty(System.IntPtr,System.Int32,System.Single)">
            <summary>
            This function sets a NURBS property.
            </summary>
            <param name="nurbsObject">The object to set the property for.</param>
            <param name="property">The property to set.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NurbsSurface(System.IntPtr,System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            This function defines a NURBS surface.
            </summary>
            <param name="nurbsObject">The NURBS object.</param>
            <param name="sknotsCount">The sknots count.</param>
            <param name="sknots">The s-knots.</param>
            <param name="tknotsCount">The number of t-knots.</param>
            <param name="tknots">The t-knots.</param>
            <param name="sStride">The distance between s vertices.</param>
            <param name="tStride">The distance between t vertices.</param>
            <param name="controlPointsArray">The control points.</param>
            <param name="sOrder">The order of the s polynomial.</param>
            <param name="tOrder">The order of the t polynomial.</param>
            <param name="type">The type of data to generate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function creates an orthographic projection matrix (i.e one with no 
            perspective) and multiplies it to the current matrix stack, which would
            normally be 'PROJECTION'.
            </summary>
            <param name="left">Left clipping plane.</param>
            <param name="right">Right clipping plane.</param>
            <param name="bottom">Bottom clipping plane.</param>
            <param name="top">Top clipping plane.</param>
            <param name="zNear">Near clipping plane.</param>
            <param name="zFar">Far clipping plane.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Ortho2D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function creates an orthographic project based on a screen size.
            </summary>
            <param name="left">Left of the screen. (Normally 0).</param>
            <param name="right">Right of the screen.(Normally width).</param>
            <param name="bottom">Bottom of the screen (normally 0).</param>
            <param name="top">Top of the screen (normally height).</param>
        </member>
        <member name="M:SharpGL.OpenGL.PartialDisk(System.IntPtr,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            This function draws a partial disk from the quadric object.
            </summary>
            <param name="qobj">The Quadric objec.t</param>
            <param name="innerRadius">Radius of the inside of the disk.</param>
            <param name="outerRadius">Radius of the outside of the disk.</param>
            <param name="slices">The slices.</param>
            <param name="loops">The loops.</param>
            <param name="startAngle">Starting angle.</param>
            <param name="sweepAngle">Sweep angle.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PassThrough(System.Single)">
            <summary>
            Place a marker in the feedback buffer.
            </summary>
            <param name="token">Specifies a marker value to be placed in the feedback buffer following a OpenGL.PASS_THROUGH_TOKEN.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function creates a perspective matrix and multiplies it to the current
            matrix stack (which in most cases should be 'PROJECTION').
            </summary>
            <param name="fovy">Field of view angle (human eye = 60 Degrees).</param>
            <param name="aspect">Apsect Ratio (width of screen divided by height of screen).</param>
            <param name="zNear">Near clipping plane (normally 1).</param>
            <param name="zFar">Far clipping plane.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PickMatrix(System.Double,System.Double,System.Double,System.Double,System.Int32[])">
            <summary>
            This function creates a 'pick matrix' normally used for selecting objects that
            are at a certain point on the screen.
            </summary>
            <param name="x">X Point.</param>
            <param name="y">Y Point.</param>
            <param name="width">Width of point to test (4 is normal).</param>
            <param name="height">Height of point to test (4 is normal).</param>
            <param name="viewport">The current viewport.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelMap(System.UInt32,System.Int32,System.Single[])">
            <summary>
            Set up pixel transfer maps.
            </summary>
            <param name="map">Specifies a symbolic	map name.</param>
            <param name="mapsize">Specifies the size of the map being defined.</param>
            <param name="values">Specifies an	array of mapsize values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelMap(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Set up pixel transfer maps.
            </summary>
            <param name="map">Specifies a symbolic	map name.</param>
            <param name="mapsize">Specifies the size of the map being defined.</param>
            <param name="values">Specifies an	array of mapsize values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelMap(System.UInt32,System.Int32,System.UInt16[])">
            <summary>
            Set up pixel transfer maps.
            </summary>
            <param name="map">Specifies a symbolic	map name.</param>
            <param name="mapsize">Specifies the size of the map being defined.</param>
            <param name="values">Specifies an	array of mapsize values.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelStore(System.UInt32,System.Single)">
            <summary>
            Set pixel storage modes.
            </summary>
            <param name="pname">Specifies the symbolic	name of	the parameter to be set.</param>
            <param name="param">Specifies the value that pname	is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelStore(System.UInt32,System.Int32)">
            <summary>
            Set pixel storage modes.
            </summary>
            <param name="pname">Specifies the symbolic	name of	the parameter to be set.</param>
            <param name="param">Specifies the value that pname	is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelTransfer(System.UInt32,System.Boolean)">
            <summary>
            Set pixel transfer modes.
            </summary>
            <param name="pname">Specifies the symbolic name of the pixel transfer parameter to be set.</param>
            <param name="param">Specifies the value that pname is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelTransfer(SharpGL.Enumerations.PixelTransferParameterName,System.Boolean)">
            <summary>
            Set pixel transfer modes.
            </summary>
            <param name="pname">Specifies the symbolic name of the pixel transfer parameter to be set.</param>
            <param name="param">Specifies the value that pname is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelTransfer(System.UInt32,System.Single)">
            <summary>
            Set pixel transfer modes.
            </summary>
            <param name="pname">Specifies the symbolic name of the pixel transfer parameter to be set.</param>
            <param name="param">Specifies the value that pname is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelTransfer(SharpGL.Enumerations.PixelTransferParameterName,System.Single)">
            <summary>
            Set pixel transfer modes.
            </summary>
            <param name="pname">Specifies the symbolic name of the pixel transfer parameter to be set.</param>
            <param name="param">Specifies the value that pname is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelTransfer(System.UInt32,System.Int32)">
            <summary>
            Set pixel transfer modes.
            </summary>
            <param name="pname">Specifies the symbolic name of the pixel transfer parameter to be set.</param>
            <param name="param">Specifies the value that pname is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelTransfer(SharpGL.Enumerations.PixelTransferParameterName,System.Int32)">
            <summary>
            Set pixel transfer modes.
            </summary>
            <param name="pname">Specifies the symbolic name of the pixel transfer parameter to be set.</param>
            <param name="param">Specifies the value that pname is set to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PixelZoom(System.Single,System.Single)">
            <summary>
            Specify	the pixel zoom factors.
            </summary>
            <param name="xfactor">Specify the x and y zoom factors for pixel write operations.</param>
            <param name="yfactor">Specify the x and y zoom factors for pixel write operations.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PointSize(System.Single)">
            <summary>
            The size of points to be rasterised.
            </summary>
            <param name="size">Size in pixels.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PolygonMode(System.UInt32,System.UInt32)">
            <summary>
            This sets the current drawing mode of polygons (points, lines, filled).
            </summary>
            <param name="face">The faces this applies to (front, back or both).</param>
            <param name="mode">The mode to set to (points, lines, or filled).</param>
        </member>
        <member name="M:SharpGL.OpenGL.PolygonMode(SharpGL.Enumerations.FaceMode,SharpGL.Enumerations.PolygonMode)">
            <summary>
            This sets the current drawing mode of polygons (points, lines, filled).
            </summary>
            <param name="face">The faces this applies to (front, back or both).</param>
            <param name="mode">The mode to set to (points, lines, or filled).</param>
        </member>
        <member name="M:SharpGL.OpenGL.PolygonOffset(System.Single,System.Single)">
            <summary>
            Set	the scale and units used to calculate depth	values.
            </summary>
            <param name="factor">Specifies a scale factor that	is used	to create a variable depth offset for each polygon. The initial value is 0.</param>
            <param name="units">Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PolygonStipple(System.Byte[])">
            <summary>
            Set the polygon stippling pattern.
            </summary>
            <param name="mask">Specifies a pointer to a 32x32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PopAttrib">
            <summary>
            This function restores the attribute stack to the state it was when
            PushAttrib was called.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.PopClientAttrib">
            <summary>
            Pop the client attribute stack.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.PopMatrix">
            <summary>
            Restore the previously saved state of the current matrix stack.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.PopName">
            <summary>
            This takes the top name off the selection names stack.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.PrioritizeTextures(System.Int32,System.UInt32[],System.Single[])">
            <summary>
            Set texture residence priority.
            </summary>
            <param name="n">Specifies the number of textures to be prioritized.</param>
            <param name="textures">Specifies an array containing the names of the textures to be prioritized.</param>
            <param name="priorities">Specifies	an array containing the	texture priorities. A priority given in an element of priorities applies to the	texture	named by the corresponding element of textures.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Project(System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Int32[],System.Double[],System.Double[],System.Double[])">
            <summary>
            This function Maps the specified object coordinates into window coordinates.
            </summary>
            <param name="objx">The object's x coord.</param>
            <param name="objy">The object's y coord.</param>
            <param name="objz">The object's z coord.</param>
            <param name="modelMatrix">The modelview matrix.</param>
            <param name="projMatrix">The projection matrix.</param>
            <param name="viewport">The viewport.</param>
            <param name="winx">The window x coord.</param>
            <param name="winy">The Window y coord.</param>
            <param name="winz">The Window z coord.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PushAttrib(System.UInt32)">
            <summary>
            Save the current state of the attribute groups specified by 'mask'.
            </summary>
            <param name="mask">The attibute groups to save.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PushAttrib(SharpGL.Enumerations.AttributeMask)">
            <summary>
            Save the current state of the attribute groups specified by 'mask'.
            </summary>
            <param name="mask">The attibute groups to save.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PushClientAttrib(System.UInt32)">
            <summary>
            Push the client attribute stack.
            </summary>
            <param name="mask">Specifies a mask that indicates	which attributes to save.</param>
        </member>
        <member name="M:SharpGL.OpenGL.PushMatrix">
            <summary>
            Save the current state of the current matrix stack.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.PushName(System.UInt32)">
            <summary>
            This function adds a new name to the selection buffer.
            </summary>
            <param name="name">The name to add.</param>
        </member>
        <member name="M:SharpGL.OpenGL.QuadricNormals(System.IntPtr,System.UInt32)">
            <summary>
            This set's the Generate Normals propery of the specified Quadric object.
            </summary>
            <param name="quadricObject">The quadric object.</param>
            <param name="normals">The type of normals to generate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.QuadricTexture(System.IntPtr,System.Int32)">
            <summary>
            This function sets the type of texture coordinates being generated by
            the specified quadric object.
            </summary>
            <param name="quadricObject">The quadric object.</param>
            <param name="textureCoords">The type of coordinates to generate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.QuadricOrientation(System.IntPtr,System.Int32)">
            <summary>
            This sets the orientation for the quadric object.
            </summary>
            <param name="quadricObject">The quadric object.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:SharpGL.OpenGL.QuadricDrawStyle(System.IntPtr,System.UInt32)">
            <summary>
            This sets the current drawstyle for the Quadric Object.
            </summary>
            <param name="quadObject">The quadric object.</param>
            <param name="drawStyle">The draw style.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Double,System.Double)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Double[])">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="v">The coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Single,System.Single)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Single[])">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="v">The coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int32,System.Int32)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int32[])">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="v">The coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int16,System.Int16)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int16[])">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="v">The coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Double,System.Double,System.Double)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Single,System.Single,System.Single)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int16,System.Int16,System.Int16)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="w">W coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="w">W coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="w">W coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RasterPos(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            This function sets the current raster position.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="w">W coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ReadBuffer(System.UInt32)">
            <summary>
            Select	a color	buffer source for pixels.
            </summary>
            <param name="mode">Specifies a color buffer.  Accepted values are OpenGL.FRONT_LEFT, OpenGL.FRONT_RIGHT, OpenGL.BACK_LEFT, OpenGL.BACK_RIGHT, OpenGL.FRONT, OpenGL.BACK, OpenGL.LEFT, OpenGL.GL_RIGHT, and OpenGL.AUXi, where i is between 0 and OpenGL.AUX_BUFFERS - 1.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Reads a block of pixels from the frame buffer.
            </summary>
            <param name="x">Top-Left X value.</param>
            <param name="y">Top-Left Y value.</param>
            <param name="width">Width of block to read.</param>
            <param name="height">Height of block to read.</param>
            <param name="format">Specifies the format of the pixel data. The following symbolic values are accepted: OpenGL.COLOR_INDEX, OpenGL.STENCIL_INDEX, OpenGL.DEPTH_COMPONENT, OpenGL.RED, OpenGL.GREEN, OpenGL.BLUE, OpenGL.ALPHA, OpenGL.RGB, OpenGL.RGBA, OpenGL.LUMINANCE and OpenGL.LUMINANCE_ALPHA.</param>
            <param name="type">Specifies the data type of the pixel data.Must be one of OpenGL.UNSIGNED_BYTE, OpenGL.BYTE, OpenGL.BITMAP, OpenGL.UNSIGNED_SHORT, OpenGL.SHORT, OpenGL.UNSIGNED_INT, OpenGL.INT or OpenGL.FLOAT.</param>
            <param name="pixels">Storage for the pixel data received.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Reads a block of pixels from the frame buffer.
            </summary>
            <param name="x">Top-Left X value.</param>
            <param name="y">Top-Left Y value.</param>
            <param name="width">Width of block to read.</param>
            <param name="height">Height of block to read.</param>
            <param name="format">Specifies the format of the pixel data. The following symbolic values are accepted: OpenGL.COLOR_INDEX, OpenGL.STENCIL_INDEX, OpenGL.DEPTH_COMPONENT, OpenGL.RED, OpenGL.GREEN, OpenGL.BLUE, OpenGL.ALPHA, OpenGL.RGB, OpenGL.RGBA, OpenGL.LUMINANCE and OpenGL.LUMINANCE_ALPHA.</param>
            <param name="type">Specifies the data type of the pixel data.Must be one of OpenGL.UNSIGNED_BYTE, OpenGL.BYTE, OpenGL.BITMAP, OpenGL.UNSIGNED_SHORT, OpenGL.SHORT, OpenGL.UNSIGNED_INT, OpenGL.INT or OpenGL.FLOAT.</param>
            <param name="pixels">Storage for the pixel data received.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a rectangle from two coordinates (top-left and bottom-right).
            </summary>
            <param name="x1">Top-Left X value.</param>
            <param name="y1">Top-Left Y value.</param>
            <param name="x2">Bottom-Right X Value.</param>
            <param name="y2">Bottom-Right Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Double[],System.Double[])">
            <summary>
            Draw a rectangle from two coordinates, expressed as arrays, e.g
            Rect(new float[] {0, 0}, new float[] {10, 10});
            </summary>
            <param name="v1">Top-Left point.</param>
            <param name="v2">Bottom-Right point.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a rectangle from two coordinates (top-left and bottom-right).
            </summary>
            <param name="x1">Top-Left X value.</param>
            <param name="y1">Top-Left Y value.</param>
            <param name="x2">Bottom-Right X Value.</param>
            <param name="y2">Bottom-Right Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Single[],System.Single[])">
            <summary>
            Draw a rectangle from two coordinates, expressed as arrays, e.g
            Rect(new float[] {0, 0}, new float[] {10, 10});
            </summary>
            <param name="v1">Top-Left point.</param>
            <param name="v2">Bottom-Right point.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a rectangle from two coordinates (top-left and bottom-right).
            </summary>
            <param name="x1">Top-Left X value.</param>
            <param name="y1">Top-Left Y value.</param>
            <param name="x2">Bottom-Right X Value.</param>
            <param name="y2">Bottom-Right Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Int32[],System.Int32[])">
            <summary>
            Draw a rectangle from two coordinates, expressed as arrays, e.g
            Rect(new float[] {0, 0}, new float[] {10, 10});
            </summary>
            <param name="v1">Top-Left point.</param>
            <param name="v2">Bottom-Right point.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Draw a rectangle from two coordinates (top-left and bottom-right).
            </summary>
            <param name="x1">Top-Left X value.</param>
            <param name="y1">Top-Left Y value.</param>
            <param name="x2">Bottom-Right X Value.</param>
            <param name="y2">Bottom-Right Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rect(System.Int16[],System.Int16[])">
            <summary>
            Draw a rectangle from two coordinates, expressed as arrays, e.g
            Rect(new float[] {0, 0}, new float[] {10, 10});
            </summary>
            <param name="v1">Top-Left point.</param>
            <param name="v2">Bottom-Right point.</param>
        </member>
        <member name="M:SharpGL.OpenGL.RenderMode(System.UInt32)">
            <summary>
            This function sets the current render mode (render, feedback or select).
            </summary>
            <param name="mode">The Render mode (RENDER, SELECT or FEEDBACK).</param>
            <returns>The hits that selection or feedback caused..</returns>
        </member>
        <member name="M:SharpGL.OpenGL.RenderMode(SharpGL.Enumerations.RenderingMode)">
            <summary>
            This function sets the current render mode (render, feedback or select).
            </summary>
            <param name="mode">The Render mode (RENDER, SELECT or FEEDBACK).</param>
            <returns>The hits that selection or feedback caused..</returns>
        </member>
        <member name="M:SharpGL.OpenGL.Rotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function applies a rotation transformation to the current matrix.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <param name="x">Amount along x.</param>
            <param name="y">Amount along y.</param>
            <param name="z">Amount along z.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This function applies a rotation transformation to the current matrix.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <param name="x">Amount along x.</param>
            <param name="y">Amount along y.</param>
            <param name="z">Amount along z.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            This function quickly does three rotations, one about each axis, with the
            given angles (it's not an OpenGL function, but very useful).
            </summary>
            <param name="anglex">The angle to rotate about x.</param>
            <param name="angley">The angle to rotate about y.</param>
            <param name="anglez">The angle to rotate about z.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Scale(System.Double,System.Double,System.Double)">
            <summary>
            This function applies a scale transformation to the current matrix.
            </summary>
            <param name="x">The amount to scale along x.</param>
            <param name="y">The amount to scale along y.</param>
            <param name="z">The amount to scale along z.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Scale(System.Single,System.Single,System.Single)">
            <summary>
            This function applies a scale transformation to the current matrix.
            </summary>
            <param name="x">The amount to scale along x.</param>
            <param name="y">The amount to scale along y.</param>
            <param name="z">The amount to scale along z.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Scissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Define the scissor box.
            </summary>
            <param name="x">Specify the lower left corner of the scissor box. Initially (0, 0).</param>
            <param name="y">Specify the lower left corner of the scissor box. Initially (0, 0).</param>
            <param name="width">Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.</param>
            <param name="height">Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.</param>
        </member>
        <member name="M:SharpGL.OpenGL.SelectBuffer(System.Int32,System.UInt32[])">
            <summary>
            This function sets the current select buffer.
            </summary>
            <param name="size">The size of the buffer you are passing.</param>
            <param name="buffer">The buffer itself.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ShadeModel(System.UInt32)">
            <summary>
            Select flat or smooth shading.
            </summary>
            <param name="mode">Specifies a symbolic value representing a shading technique. Accepted values are OpenGL.FLAT and OpenGL.SMOOTH. The default is OpenGL.SMOOTH.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ShadeModel(SharpGL.Enumerations.ShadeModel)">
            <summary>
            Select flat or smooth shading.
            </summary>
            <param name="mode">Specifies a symbolic value representing a shading technique. Accepted values are OpenGL.FLAT and OpenGL.SMOOTH. The default is OpenGL.SMOOTH.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Sphere(System.IntPtr,System.Double,System.Int32,System.Int32)">
            <summary>
            This function draws a sphere from a Quadric Object.
            </summary>
            <param name="qobj">The quadric object.</param>
            <param name="radius">Sphere radius.</param>
            <param name="slices">Slices of the sphere.</param>
            <param name="stacks">Stakcs of the sphere.</param>
        </member>
        <member name="M:SharpGL.OpenGL.StencilFunc(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            This function sets the current stencil buffer function.
            </summary>
            <param name="func">The function type.</param>
            <param name="reference">The function reference.</param>
            <param name="mask">The function mask.</param>
        </member>
        <member name="M:SharpGL.OpenGL.StencilFunc(SharpGL.Enumerations.StencilFunction,System.Int32,System.UInt32)">
            <summary>
            This function sets the current stencil buffer function.
            </summary>
            <param name="func">The function type.</param>
            <param name="reference">The function reference.</param>
            <param name="mask">The function mask.</param>
        </member>
        <member name="M:SharpGL.OpenGL.StencilMask(System.UInt32)">
            <summary>
            This function sets the stencil buffer mask.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:SharpGL.OpenGL.StencilOp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            This function sets the stencil buffer operation.
            </summary>
            <param name="fail">Fail operation.</param>
            <param name="zfail">Depth fail component.</param>
            <param name="zpass">Depth pass component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.StencilOp(SharpGL.Enumerations.StencilOperation,SharpGL.Enumerations.StencilOperation,SharpGL.Enumerations.StencilOperation)">
            <summary>
            This function sets the stencil buffer operation.
            </summary>
            <param name="fail">Fail operation.</param>
            <param name="zfail">Depth fail component.</param>
            <param name="zpass">Depth pass component.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Double)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Double[])">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="v">Array of 1,2,3 or 4 Texture Coordinates.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Single)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Single[])">
            <summary>
            This function sets the current texture coordinates. WARNING: if you
            can call something more explicit, like TexCoord2f then call that, it's
            much faster.
            </summary>
            <param name="v">Array of 1,2,3 or 4 Texture Coordinates.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int32)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int32[])">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="v">Array of 1,2,3 or 4 Texture Coordinates.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int16)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int16[])">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="v">Array of 1,2,3 or 4 Texture Coordinates.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Double,System.Double)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Single,System.Single)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int32,System.Int32)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int16,System.Int16)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Double,System.Double,System.Double)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Single,System.Single,System.Single)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int16,System.Int16,System.Int16)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
            <param name="q">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
            <param name="q">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
            <param name="q">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoord(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            This function sets the current texture coordinates.
            </summary>
            <param name="s">Texture Coordinate.</param>
            <param name="t">Texture Coordinate.</param>
            <param name="r">Texture Coordinate.</param>
            <param name="q">Texture Coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoordPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            This function sets the texture coord array.
            </summary>
            <param name="size">The number of coords per set.</param>
            <param name="type">The type of data.</param>
            <param name="stride">The number of bytes between coords.</param>
            <param name="pointer">The coords.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexCoordPointer(System.Int32,System.UInt32,System.Int32,System.Single[])">
            <summary>
            This function sets the texture coord array.
            </summary>
            <param name="size">The number of coords per set.</param>
            <param name="type">The type of data.</param>
            <param name="stride">The number of bytes between coords.</param>
            <param name="pointer">The coords.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexEnv(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Set texture environment parameters.
            </summary>
            <param name="target">Specifies a texture environment. Must be OpenGL.TEXTURE_ENV.</param>
            <param name="pname">Specifies the symbolic name of a single-valued texture environment parameter. Must be OpenGL.TEXTURE_ENV_MODE.</param>
            <param name="param">Specifies a single symbolic constant, one of OpenGL.MODULATE, OpenGL.DECAL, OpenGL.BLEND, or OpenGL.REPLACE.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexEnv(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Set texture environment parameters.
            </summary>
            <param name="target">Specifies a texture environment. Must be OpenGL.TEXTURE_ENV.</param>
            <param name="pname">Specifies the symbolic name of a texture environment parameter. Accepted values are OpenGL.TEXTURE_ENV_MODE and OpenGL.TEXTURE_ENV_COLOR.</param>
            <param name="parameters">Specifies a pointer to a parameter array that contains either a single symbolic constant or an RGBA color.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexEnv(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Set texture environment parameters.
            </summary>
            <param name="target">Specifies a texture environment. Must be OpenGL.TEXTURE_ENV.</param>
            <param name="pname">Specifies the symbolic name of a single-valued texture environment parameter. Must be OpenGL.TEXTURE_ENV_MODE.</param>
            <param name="param">Specifies a single symbolic constant, one of OpenGL.MODULATE, OpenGL.DECAL, OpenGL.BLEND, or OpenGL.REPLACE.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexEnv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Set texture environment parameters.
            </summary>
            <param name="target">Specifies a texture environment. Must be OpenGL.TEXTURE_ENV.</param>
            <param name="pname">Specifies the symbolic name of a texture environment parameter. Accepted values are OpenGL.TEXTURE_ENV_MODE and OpenGL.TEXTURE_ENV_COLOR.</param>
            <param name="parameters">Specifies a pointer to a parameter array that contains either a single symbolic constant or an RGBA color.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexGen(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function. Must be OpenGL.TEXTURE_GEN_MODE.</param>
            <param name="param">Specifies a single-valued texture generation parameter, one of OpenGL.OBJECT_LINEAR, OpenGL.GL_EYE_LINEAR, or OpenGL.SPHERE_MAP.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexGen(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function or function parameters. Must be OpenGL.TEXTURE_GEN_MODE, OpenGL.OBJECT_PLANE, or OpenGL.EYE_PLANE.</param>
            <param name="parameters">Specifies a pointer to an array of texture generation parameters. If pname is OpenGL.TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, one of OpenGL.OBJECT_LINEAR, OpenGL.EYE_LINEAR, or OpenGL.SPHERE_MAP. Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexGen(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function. Must be OpenGL.TEXTURE_GEN_MODE.</param>
            <param name="param">Specifies a single-valued texture generation parameter, one of OpenGL.OBJECT_LINEAR, OpenGL.GL_EYE_LINEAR, or OpenGL.SPHERE_MAP.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexGen(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function or function parameters. Must be OpenGL.TEXTURE_GEN_MODE, OpenGL.OBJECT_PLANE, or OpenGL.EYE_PLANE.</param>
            <param name="parameters">Specifies a pointer to an array of texture generation parameters. If pname is OpenGL.TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, one of OpenGL.OBJECT_LINEAR, OpenGL.EYE_LINEAR, or OpenGL.SPHERE_MAP. Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexGen(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function. Must be OpenGL.TEXTURE_GEN_MODE.</param>
            <param name="param">Specifies a single-valued texture generation parameter, one of OpenGL.OBJECT_LINEAR, OpenGL.GL_EYE_LINEAR, or OpenGL.SPHERE_MAP.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexGen(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Control the generation of texture coordinates.
            </summary>
            <param name="coord">Specifies a texture coordinate. Must be one of OpenGL.S, OpenGL.T, OpenGL.R, or OpenGL.Q.</param>
            <param name="pname">Specifies the symbolic name of the texture-coordinate generation function or function parameters. Must be OpenGL.TEXTURE_GEN_MODE, OpenGL.OBJECT_PLANE, or OpenGL.EYE_PLANE.</param>
            <param name="parameters">Specifies a pointer to an array of texture generation parameters. If pname is OpenGL.TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, one of OpenGL.OBJECT_LINEAR, OpenGL.EYE_LINEAR, or OpenGL.SPHERE_MAP. Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexImage1D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            This function sets the image for the currently binded texture.
            </summary>
            <param name="target">The type of texture, TEXTURE_2D or PROXY_TEXTURE_2D.</param>
            <param name="level">For mip-map textures, ordinary textures should be '0'.</param>
            <param name="internalformat">The format of the data you are want OpenGL to create, e.g  RGB16.</param>
            <param name="width">The width of the texture image (must be a power of 2, e.g 64).</param>
            <param name="border">The width of the border (0 or 1).</param>
            <param name="format">The format of the data you are passing, e.g. RGBA.</param>
            <param name="type">The type of data you are passing, e.g GL_BYTE.</param>
            <param name="pixels">The actual pixel data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            This function sets the image for the currently binded texture.
            </summary>
            <param name="target">The type of texture, TEXTURE_2D or PROXY_TEXTURE_2D.</param>
            <param name="level">For mip-map textures, ordinary textures should be '0'.</param>
            <param name="internalformat">The format of the data you are want OpenGL to create, e.g  RGB16.</param>
            <param name="width">The width of the texture image (must be a power of 2, e.g 64).</param>
            <param name="height">The height of the texture image (must be a power of 2, e.g 32).</param>
            <param name="border">The width of the border (0 or 1).</param>
            <param name="format">The format of the data you are passing, e.g. RGBA.</param>
            <param name="type">The type of data you are passing, e.g GL_BYTE.</param>
            <param name="pixels">The actual pixel data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            This function sets the image for the currently binded texture.
            </summary>
            <param name="target">The type of texture, TEXTURE_2D or PROXY_TEXTURE_2D.</param>
            <param name="level">For mip-map textures, ordinary textures should be '0'.</param>
            <param name="internalformat">The format of the data you are want OpenGL to create, e.g  RGB16.</param>
            <param name="width">The width of the texture image (must be a power of 2, e.g 64).</param>
            <param name="height">The height of the texture image (must be a power of 2, e.g 32).</param>
            <param name="border">The width of the border (0 or 1).</param>
            <param name="format">The format of the data you are passing, e.g. RGBA.</param>
            <param name="type">The type of data you are passing, e.g GL_BYTE.</param>
            <param name="pixels">The actual pixel data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="param">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(SharpGL.Enumerations.TextureTarget,SharpGL.Enumerations.TextureParameter,System.Single)">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="param">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="parameters">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(SharpGL.Enumerations.TextureTarget,SharpGL.Enumerations.TextureParameter,System.Single[])">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="parameters">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="param">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(SharpGL.Enumerations.TextureTarget,SharpGL.Enumerations.TextureParameter,System.Int32)">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="param">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="parameters">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexParameter(SharpGL.Enumerations.TextureTarget,SharpGL.Enumerations.TextureParameter,System.Int32[])">
            <summary>
            This function sets the parameters for the currently binded texture object.
            </summary>
            <param name="target">The type of texture you are setting the parameter to, e.g. TEXTURE_2D</param>
            <param name="pname">The parameter to set.</param>
            <param name="parameters">The value to set it to.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Specify a two-dimensional texture subimage.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_1D.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xoffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="width">Specifies the width of the texture subimage.</param>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="type">Specifies the data type of the pixel	data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Specify a two-dimensional texture subimage.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_1D.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xoffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yoffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture subimage.</param>
            <param name="height">Specifies the height of the texture subimage.</param>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="type">Specifies the data type of the pixel	data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Translate(System.Double,System.Double,System.Double)">
            <summary>
            This function applies a translation transformation to the current matrix.
            </summary>
            <param name="x">The amount to translate along the x axis.</param>
            <param name="y">The amount to translate along the y axis.</param>
            <param name="z">The amount to translate along the z axis.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function applies a translation transformation to the current matrix.
            </summary>
            <param name="x">The amount to translate along the x axis.</param>
            <param name="y">The amount to translate along the y axis.</param>
            <param name="z">The amount to translate along the z axis.</param>
        </member>
        <member name="M:SharpGL.OpenGL.UnProject(System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Int32[],System.Double@,System.Double@,System.Double@)">
            <summary>
            This function turns a screen Coordinate into a world coordinate.
            </summary>
            <param name="winx">Screen Coordinate.</param>
            <param name="winy">Screen Coordinate.</param>
            <param name="winz">Screen Coordinate.</param>
            <param name="modelMatrix">Current ModelView matrix.</param>
            <param name="projMatrix">Current Projection matrix.</param>
            <param name="viewport">Current Viewport.</param>
            <param name="objx">The world coordinate.</param>
            <param name="objy">The world coordinate.</param>
            <param name="objz">The world coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.UnProject(System.Double,System.Double,System.Double)">
            <summary>
            This is a convenience function. It calls UnProject with the current 
            viewport, modelview and persective matricies, saving you from getting them.
            To use you own matricies, all the other version of UnProject.
            </summary>
            <param name="winx">X Coordinate (Screen Coordinate).</param>
            <param name="winy">Y Coordinate (Screen Coordinate).</param>
            <param name="winz">Z Coordinate (Screen Coordinate).</param>
            <returns>The world coordinate.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Double,System.Double)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Double[])">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="v">Specifies the coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Single,System.Single)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Int32,System.Int32)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Int32[])">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="v">Specifies the coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Int16,System.Int16)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex2sv(System.Int16[])">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="v">Specifies the coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Double,System.Double,System.Double)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Single,System.Single,System.Single)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Single[])">
            <summary>
            Sets the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="v">An array of 2, 3 or 4 floats.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex4d(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
            <param name="w">W Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex4f(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
            <param name="w">W Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex4i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
            <param name="w">W Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Vertex4s(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the current vertex (must be called between 'Begin' and 'End').
            </summary>
            <param name="x">X Value.</param>
            <param name="y">Y Value.</param>
            <param name="z">Z Value.</param>
            <param name="w">W Value.</param>
        </member>
        <member name="M:SharpGL.OpenGL.VertexPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            This function sets the address of the vertex pointer array.
            </summary>
            <param name="size">The number of coords per vertex.</param>
            <param name="type">The data type.</param>
            <param name="stride">The byte offset between vertices.</param>
            <param name="pointer">The array.</param>
        </member>
        <member name="M:SharpGL.OpenGL.VertexPointer(System.Int32,System.UInt32,System.Int32,System.Single[])">
            <summary>
            This function sets the address of the vertex pointer array.
            </summary>
            <param name="size">The number of coords per vertex.</param>
            <param name="type">The data type.</param>
            <param name="stride">The byte offset between vertices.</param>
            <param name="pointer">The array.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Viewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This sets the viewport of the current Render Context. Normally x and y are 0
            and the width and height are just those of the control/graphics you are drawing
            to.
            </summary>
            <param name="x">Top-Left point of the viewport.</param>
            <param name="y">Top-Left point of the viewport.</param>
            <param name="width">Width of the viewport.</param>
            <param name="height">Height of the viewport.</param>
        </member>
        <member name="M:SharpGL.OpenGL.ErrorString(System.UInt32)">
            <summary>
            Produce an error string from a GL or GLU error code.
            </summary>
            <param name="errCode">Specifies a GL or GLU error code.</param>
            <returns>The OpenGL/GLU error string.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.GetString(System.Int32)">
            <summary>
            Return a string describing the GLU version or GLU extensions.
            </summary>
            <param name="name">Specifies a symbolic constant, one of OpenGL.VERSION, or OpenGL.EXTENSIONS.</param>
            <returns>The GLU string.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.ScaleImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Scale an image to an arbitrary size.
            </summary>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="widthin">Specify the width of the source image	that is	scaled.</param>
            <param name="heightin">Specify the height of the source image that is scaled.</param>
            <param name="typein">Specifies the data type for dataIn.</param>
            <param name="datain">Specifies a pointer to the source image.</param>
            <param name="widthout">Specify the width of the destination image.</param>
            <param name="heightout">Specify the height of the destination image.</param>
            <param name="typeout">Specifies the data type for dataOut.</param>
            <param name="dataout">Specifies a pointer to the destination image.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Build1DMipmaps(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Create 1-D mipmaps.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_1D.</param>
            <param name="components">Specifies the number of color components in the texture. Must be 1, 2, 3, or 4.</param>
            <param name="width">Specifies the width of the texture image.</param>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="type">Specifies the data type for data.</param>
            <param name="data">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Build2DMipmaps(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Create 2-D mipmaps.
            </summary>
            <param name="target">Specifies the target texture. Must be OpenGL.TEXTURE_1D.</param>
            <param name="components">Specifies the number of color components in the texture. Must be 1, 2, 3, or 4.</param>
            <param name="width">Specifies the width of the texture image.</param>
            <param name="height">Specifies the height of the texture image.</param>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="type">Specifies the data type for data.</param>
            <param name="data">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Disk(System.IntPtr,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Draw a disk.
            </summary>
            <param name="qobj">Specifies the quadrics object (created with gluNewQuadric).</param>
            <param name="innerRadius">Specifies the	inner radius of	the disk (may be 0).</param>
            <param name="outerRadius">Specifies the	outer radius of	the disk.</param>
            <param name="slices">Specifies the	number of subdivisions around the z axis.</param>
            <param name="loops">Specifies the	number of concentric rings about the origin into which the disk is subdivided.</param>
        </member>
        <member name="M:SharpGL.OpenGL.NewTess">
            <summary>
            Create a tessellation object.
            </summary>
            <returns>A new GLUtesselator poiner.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.DeleteTess(System.IntPtr)">
            <summary>
            Delete a tesselator object.
            </summary>
            <param name="tess">The tesselator pointer.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessBeginPolygon(System.IntPtr,System.IntPtr)">
            <summary>
            Delimit a polygon description.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
            <param name="polygonData">Specifies a pointer to user polygon data.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessBeginContour(System.IntPtr)">
            <summary>
            Delimit a contour description.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessVertex(System.IntPtr,System.Double[],System.Double[])">
            <summary>
            Specify a vertex on a polygon.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
            <param name="coords">Specifies the location of the vertex.</param>
            <param name="data">Specifies an opaque	pointer	passed back to the program with the vertex callback (as specified by gluTessCallback).</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessEndContour(System.IntPtr)">
            <summary>
            Delimit a contour description.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessEndPolygon(System.IntPtr)">
            <summary>
            Delimit a polygon description.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessProperty(System.IntPtr,System.Int32,System.Double)">
            <summary>
            Set a tessellation object property.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
            <param name="which">Specifies the property to be set.</param>
            <param name="value">Specifies the value of	the indicated property.</param>
        </member>
        <member name="M:SharpGL.OpenGL.TessNormal(System.IntPtr,System.Double,System.Double,System.Double)">
            <summary>
            Specify a normal for a polygon.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
            <param name="x">Specifies the first component of the normal.</param>
            <param name="y">Specifies the second component of the normal.</param>
            <param name="z">Specifies the third component of the normal.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetTessProperty(System.IntPtr,System.Int32,System.Double)">
            <summary>
            Set a tessellation object property.
            </summary>
            <param name="tess">Specifies the tessellation object (created with gluNewTess).</param>
            <param name="which">Specifies the property	to be set.</param>
            <param name="value">Specifies the value of	the indicated property.</param>
        </member>
        <member name="M:SharpGL.OpenGL.BeginTrim(System.IntPtr)">
            <summary>
            Delimit a NURBS trimming loop definition.
            </summary>
            <param name="nobj">Specifies the NURBS object (created with gluNewNurbsRenderer).</param>
        </member>
        <member name="M:SharpGL.OpenGL.EndTrim(System.IntPtr)">
            <summary>
            Delimit a NURBS trimming loop definition.
            </summary>
            <param name="nobj">Specifies the NURBS object (created with gluNewNurbsRenderer).</param>
        </member>
        <member name="M:SharpGL.OpenGL.PwlCurve(System.IntPtr,System.Int32,System.Single,System.Int32,System.UInt32)">
            <summary>
            Describe a piecewise linear NURBS trimming curve.
            </summary>
            <param name="nobj">Specifies the NURBS object (created with gluNewNurbsRenderer).</param>
            <param name="count">Specifies the number of points on the curve.</param>
            <param name="array">Specifies an array containing the curve points.</param>
            <param name="stride">Specifies the offset (a number of single-precision floating-point values) between points on the curve.</param>
            <param name="type">Specifies the type of curve. Must be either OpenGL.MAP1_TRIM_2 or OpenGL.MAP1_TRIM_3.</param>
        </member>
        <member name="M:SharpGL.OpenGL.LoadSamplingMatrices(System.IntPtr,System.Single[],System.Single[],System.Int32[])">
            <summary>
            Load NURBS sampling and culling matrice.
            </summary>
            <param name="nobj">Specifies the NURBS object (created with gluNewNurbsRenderer).</param>
            <param name="modelMatrix">Specifies a modelview matrix (as from a glGetFloatv call).</param>
            <param name="projMatrix">Specifies a projection matrix (as from a glGetFloatv call).</param>
            <param name="viewport">Specifies a viewport (as from a glGetIntegerv call).</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetNurbsProperty(System.IntPtr,System.Int32,System.Single)">
            <summary>
            Get a NURBS property.
            </summary>
            <param name="nobj">Specifies the NURBS object (created with gluNewNurbsRenderer).</param>
            <param name="property">Specifies the property whose value is to be fetched.</param>
            <param name="value">Specifies a pointer to the location into which the value of the named property is written.</param>
        </member>
        <member name="M:SharpGL.OpenGL.GetErrorDescription(System.UInt32)">
            <summary>
            Gets the error description for a given error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>The error description for the given error code.</returns>
        </member>
        <member name="M:SharpGL.OpenGL.PreGLCall">
            <summary>
            Called before an OpenGL call to enable error checking and ensure the
            correct OpenGL context is correct.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.PostGLCall">
            <summary>
            Called after an OpenGL call to enable error checking.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.GDItoOpenGL(System.Int32@,System.Int32@)">
            <summary>
            This function transforms a windows point into an OpenGL point,
            which is measured from the bottom left of the screen.
            </summary>
            <param name="x">The x coord.</param>
            <param name="y">The y coord.</param>
        </member>
        <member name="M:SharpGL.OpenGL.Create(SharpGL.RenderContextType,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the OpenGL instance.
            </summary>
            <param name="renderContextType">Type of the render context.</param>
            <param name="width">The drawing context width.</param>
            <param name="height">The drawing context height.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.OpenGL.CreateFromExternalContext(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates the OpenGL instance using an external, existing render context.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="windowHandle">The window handle.</param>
            <param name="renderContextHandle">The render context handle.</param>
            <param name="deviceContextHandle">The device context handle.</param>
            <returns>True on success</returns>
        </member>
        <member name="M:SharpGL.OpenGL.MakeCurrent">
            <summary>
            Makes the OpenGL instance current.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.MakeNothingCurrent">
            <summary>
            Makes no render context current.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGL.Blit(System.IntPtr)">
            <summary>
            Blits to the specified device context handle.
            </summary>
            <param name="deviceContextHandle">The device context handle.</param>
        </member>
        <member name="M:SharpGL.OpenGL.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Set the render context dimensions.
            </summary>
            <param name="width">The width (in pixels).</param>
            <param name="height">The height (in pixels).</param>
        </member>
        <member name="M:SharpGL.OpenGL.GDICoordinatetoOpenGLCoordinate(System.Int32@,System.Int32@)">
            <summary>
            GDIs the coordinateto open GL coordinate.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawText(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.Single,System.String)">
            <summary>
            Draws the text.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <param name="faceName">Name of the face.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:SharpGL.OpenGL.DrawText3D(System.String,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Draws 3D text.
            </summary>
            <param name="faceName">Name of the face.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="deviation">The deviation.</param>
            <param name="extrusion">The extrusion.</param>
            <param name="text">The text.</param>
        </member>
        <member name="F:SharpGL.OpenGL.currentOpenGLInstance">
            <summary>
            The current OpenGL instance.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.renderContextProvider">
            <summary>
            The render context provider.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.insideGLBegin">
            <summary>
            Set to true if we're inside glBegin.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.fontBitmaps">
            <summary>
            The fontbitmaps object is used to allow easy rendering of text.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGL.fontOutlines">
            <summary>
            The FontOutlines object is used to allow rendering of text.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGL.RenderContextProvider">
            <summary>
            Gets the render context provider.
            </summary>
            <value>The render context provider.</value>
        </member>
        <member name="P:SharpGL.OpenGL.Vendor">
            <summary>
            Gets the vendor.
            </summary>
            <value>The vendor.</value>
        </member>
        <member name="P:SharpGL.OpenGL.Renderer">
            <summary>
            Gets the renderer.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="P:SharpGL.OpenGL.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:SharpGL.OpenGL.Extensions">
            <summary>
            Gets the extensions.
            </summary>
            <value>The extensions.</value>
        </member>
        <member name="M:SharpGL.RenderContextProviders.IRenderContextProvider.Create(SharpGL.OpenGL,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the render context provider. Must also create the OpenGL extensions.
            </summary>
            <param name="gl">The OpenGL context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="parameter">The extra parameter.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.RenderContextProviders.IRenderContextProvider.Destroy">
            <summary>
            Destroys the render context provider instance.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.IRenderContextProvider.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the render context provider.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.IRenderContextProvider.MakeCurrent">
            <summary>
            Makes the render context current.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.IRenderContextProvider.Blit(System.IntPtr)">
            <summary>
            Blit the rendered data to the supplied device context.
            </summary>
            <param name="hdc">The HDC.</param>
        </member>
        <member name="P:SharpGL.RenderContextProviders.IRenderContextProvider.RenderContextHandle">
            <summary>
            Gets the render context handle.
            </summary>
        </member>
        <member name="P:SharpGL.RenderContextProviders.IRenderContextProvider.DeviceContextHandle">
            <summary>
            Gets the device context handle.
            </summary>
        </member>
        <member name="P:SharpGL.RenderContextProviders.IRenderContextProvider.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpGL.RenderContextProviders.IRenderContextProvider.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpGL.RenderContextProviders.IRenderContextProvider.BitDepth">
            <summary>
            Gets or sets the bit depth.
            </summary>
            <value>The bit depth.</value>
        </member>
        <member name="P:SharpGL.RenderContextProviders.IRenderContextProvider.GDIDrawingEnabled">
            <summary>
            Gets a value indicating whether GDI drawing is enabled for this type of render context.
            </summary>
            <value><c>true</c> if GDI drawing is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpGL.RenderContextProviders.RenderContextProvider.Create(SharpGL.OpenGL,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the render context provider. Must also create the OpenGL extensions.
            </summary>
            <param name="gl">The OpenGL context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.RenderContextProviders.RenderContextProvider.Destroy">
            <summary>
            Destroys the render context provider instance.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.RenderContextProvider.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the render context provider.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.RenderContextProvider.MakeCurrent">
            <summary>
            Makes the render context current.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.RenderContextProvider.Blit(System.IntPtr)">
            <summary>
            Blit the rendered data to the supplied device context.
            </summary>
            <param name="hdc">The HDC.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.RenderContextProvider.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.RenderContextProvider.renderContextHandle">
            <summary>
            The render context handle.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.RenderContextProvider.deviceContextHandle">
            <summary>
            The device context handle.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.RenderContextProvider.width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.RenderContextProvider.height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.RenderContextProvider.bitDepth">
            <summary>
            The bit depth.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.RenderContextProvider.gdiDrawingEnabled">
            <summary>
            Is gdi drawing enabled?
            </summary>
        </member>
        <member name="P:SharpGL.RenderContextProviders.RenderContextProvider.RenderContextHandle">
            <summary>
            Gets the render context handle.
            </summary>
        </member>
        <member name="P:SharpGL.RenderContextProviders.RenderContextProvider.DeviceContextHandle">
            <summary>
            Gets the device context handle.
            </summary>
        </member>
        <member name="P:SharpGL.RenderContextProviders.RenderContextProvider.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpGL.RenderContextProviders.RenderContextProvider.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpGL.RenderContextProviders.RenderContextProvider.BitDepth">
            <summary>
            Gets or sets the bit depth.
            </summary>
            <value>The bit depth.</value>
        </member>
        <member name="P:SharpGL.RenderContextProviders.RenderContextProvider.GDIDrawingEnabled">
            <summary>
            Gets a value indicating whether GDI drawing is enabled for this type of render context.
            </summary>
            <value><c>true</c> if GDI drawing is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpGL.RenderContextProviders.DIBSectionRenderContextProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderContextProviders.DIBSectionRenderContextProvider"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.DIBSectionRenderContextProvider.Create(SharpGL.OpenGL,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the render context provider. Must also create the OpenGL extensions.
            </summary>
            <param name="gl">The OpenGL context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.RenderContextProviders.DIBSectionRenderContextProvider.Destroy">
            <summary>
            Destroys the render context provider instance.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.DIBSectionRenderContextProvider.dibSection">
            <summary>
            The DIB Section object.
            </summary>
        </member>
        <member name="P:SharpGL.RenderContextProviders.DIBSectionRenderContextProvider.DIBSection">
            <summary>
            Gets the DIB section.
            </summary>
            <value>The DIB section.</value>
        </member>
        <member name="T:SharpGL.Win32">
            <summary>
            Useful functions imported from the Win32 SDK.
            </summary>
        </member>
        <member name="M:SharpGL.Win32.#cctor">
            <summary>
            Initializes the <see cref="T:SharpGL.Win32"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.Win32.wglGetCurrentContext">
            <summary>
            Gets the current render context.
            </summary>
            <returns>The current render context.</returns>
        </member>
        <member name="M:SharpGL.Win32.wglMakeCurrent(System.IntPtr,System.IntPtr)">
            <summary>
            Make the specified render context current.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="hrc">The handle to the render context.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.Win32.wglCreateContext(System.IntPtr)">
            <summary>
            Creates a render context from the device context.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <returns>The handle to the render context.</returns>
        </member>
        <member name="M:SharpGL.Win32.wglDeleteContext(System.IntPtr)">
            <summary>
            Deletes the render context.
            </summary>
            <param name="hrc">The handle to the render context.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.Win32.wglGetProcAddress(System.String)">
            <summary>
            Gets a proc address.
            </summary>
            <param name="name">The name of the function.</param>
            <returns>The address of the function.</returns>
        </member>
        <member name="M:SharpGL.Win32.wglUseFontBitmaps(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The wglUseFontBitmaps function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.
            </summary>
            <param name="hDC">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context..</param>
            <param name="first">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
            <param name="count">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates count display lists, one for each glyph in the run.</param>
            <param name="listBase">Specifies a starting display list.</param>
            <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:SharpGL.Win32.wglUseFontOutlines(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.IntPtr)">
            <summary>
            The wglUseFontOutlines function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context.
            </summary>
            <param name="hDC">The h DC.</param>
            <param name="first">The first.</param>
            <param name="count">The count.</param>
            <param name="listBase">The list base.</param>
            <param name="deviation">The deviation.</param>
            <param name="extrusion">The extrusion.</param>
            <param name="format">The format.</param>
            <param name="lpgmf">The LPGMF.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.Win32.wglShareLists(System.IntPtr,System.IntPtr)">
            <summary>
            Link two render contexts so they share lists (buffer IDs, etc.)
            </summary>
            <param name="hrc1">The first context.</param>
            <param name="hrc2">The second context.</param>
            <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. 
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStylesEx.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:SharpGL.Win32.WindowStyles.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="T:SharpGL.FontBitmapEntry">
            <summary>
            A FontBitmap entry contains the details of a font face.
            </summary>
        </member>
        <member name="T:SharpGL.FontBitmaps">
            <summary>
            This class wraps the functionality of the wglUseFontBitmaps function to
            allow straightforward rendering of text.
            </summary>
        </member>
        <member name="M:SharpGL.FontBitmaps.DrawText(SharpGL.OpenGL,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.Single,System.String)">
            <summary>
            Draws the text.
            </summary>
            <param name="gl">The gl.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <param name="faceName">Name of the face.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="text">The text.</param>
        </member>
        <member name="F:SharpGL.FontBitmaps.fontBitmapEntries">
            <summary>
            Cache of font bitmap enties.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.Create(SharpGL.OpenGL,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the render context provider. Must also create the OpenGL extensions.
            </summary>
            <param name="gl">The OpenGL context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="parameter">The parameter</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.Destroy">
            <summary>
            Destroys the render context provider instance.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the render context provider.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.Blit(System.IntPtr)">
            <summary>
            Blit the rendered data to the supplied device context.
            </summary>
            <param name="hdc">The HDC.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.MakeCurrent">
            <summary>
            Makes the render context current.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.HiddenWindowRenderContextProvider.windowHandle">
            <summary>
            The window handle.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.FBORenderContextProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderContextProviders.FBORenderContextProvider"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.FBORenderContextProvider.Create(SharpGL.OpenGL,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the render context provider. Must also create the OpenGL extensions.
            </summary>
            <param name="gl">The OpenGL context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="P:SharpGL.RenderContextProviders.FBORenderContextProvider.InternalDIBSection">
            <summary>
            Gets the internal DIB section.
            </summary>
            <value>The internal DIB section.</value>
        </member>
        <member name="T:SharpGL.Enumerations.AccumOperation">
            <summary>
             AccumOp
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.AlphaTestFunction">
            <summary>
            The alpha function
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.AttributeMask">
            <summary>
            The OpenGL Attribute flags.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.BeginMode">
            <summary>
            The begin mode.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.BlendingDestinationFactor">
            <summary>
            BlendingDestinationFactor
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.BlendingSourceFactor">
            <summary>
            The blending source factor.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.BlendingSourceFactor.SourceAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.ClipPlaneName">
            <summary>
            The Clip Plane Name
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.FaceMode">
            <summary>
            The Cull Face mode.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.FaceMode.Front">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.DataType">
            <summary>
            The Data Type.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.DataType.Double">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.DepthFunction">
            <summary>
            The depth function
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.DrawBufferMode">
            <summary>
            The Draw Buffer Mode
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.ErrorCode">
            <summary>
            Error Code
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.FeedbackMode">
            <summary>
            FeedBackMode
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.FeedbackToken">
            <summary>
            The Feedback Token
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.FogMode">
            <summary>
            The Fog Mode.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.FogMode.Exp2">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.GetMapTarget">
            <summary>
            GetMapTarget 
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.FrontFaceMode">
            <summary>
            The Front Face Mode.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.HintMode">
            <summary>
            The hint mode.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.HintMode.Nicest">
            <summary>
            The 
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.HintTarget">
            <summary>
            The hint target.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.LightName">
            <summary>
            LightName
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.LightParameter">
            <summary>
            LightParameter
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.LightModelParameter">
            <summary>
            The Light Model Parameter.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.LogicOp">
            <summary>
            The Logic Op
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.MatrixMode">
            <summary>
            The matrix mode.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.PixelTransferParameterName">
            <summary>
            The pixel transfer parameter name
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.PolygonMode">
            <summary>
            The Polygon mode.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.PolygonMode.Points">
            <summary>
            Render as points.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.PolygonMode.Lines">
            <summary>
            Render as lines.
            </summary>
        </member>
        <member name="F:SharpGL.Enumerations.PolygonMode.Filled">
            <summary>
            Render as filled.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.RenderingMode">
            <summary>
            Rendering Mode 
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.ShadeModel">
            <summary>
            ShadingModel
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.StencilFunction">
            <summary>
            The stencil function
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.StencilOperation">
            <summary>
            The stencil operation.
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.TextureParameter">
            <summary>
            GetTextureParameter
            </summary>
        </member>
        <member name="T:SharpGL.Enumerations.TextureTarget">
            <summary>
            Texture target.
            </summary>
        </member>
        <member name="T:SharpGL.RenderContextType">
            <summary>
            The render context type.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextType.DIBSection">
            <summary>
            A DIB section - offscreen but NEVER hardware accelerated.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextType.NativeWindow">
            <summary>
            A Native Window - directly render to a window, the window handle
            must be passed as the parameter to Create. Hardware acceleration
            is supported but one can never do GDI drawing on top of the 
            OpenGL drawing.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextType.HiddenWindow">
            <summary>
            A Hidden Window - more initial overhead but acceleratable.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextType.FBO">
            <summary>
            A Framebuffer Object - accelerated but may not be supported on some card.
            </summary>
        </member>
        <member name="T:SharpGL.RenderContextProviders.ExternalRenderContextProvider">
            <summary>
            Render context provider for working with an external render context
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.ExternalRenderContextProvider.windowHandle">
            <summary>
            The window handle.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.ExternalRenderContextProvider.#ctor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderContextProviders.ExternalRenderContextProvider"/> class.
            </summary>
            <param name="windowHandle">The existing window handle.</param>
            <param name="renderContextHandle">The handle to the existing render context.</param>
            <param name="deviceContextHandle">The handle to the existing device context.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.ExternalRenderContextProvider.Destroy">
            <summary>
            Destroys the render context provider instance.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.ExternalRenderContextProvider.Blit(System.IntPtr)">
            <summary>
            Blit the rendered data to the supplied device context.
            </summary>
            <param name="hdc">The HDC.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.ExternalRenderContextProvider.MakeCurrent">
            <summary>
            Makes the render context current.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.Create(SharpGL.OpenGL,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates the render context provider. Must also create the OpenGL extensions.
            </summary>
            <param name="gl">The OpenGL context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.Destroy">
            <summary>
            Destroys the render context provider instance.
            </summary>
        </member>
        <member name="M:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the render context provider.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.Blit(System.IntPtr)">
            <summary>
            Blit the rendered data to the supplied device context.
            </summary>
            <param name="hdc">The HDC.</param>
        </member>
        <member name="M:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.MakeCurrent">
            <summary>
            Makes the render context current.
            </summary>
        </member>
        <member name="F:SharpGL.RenderContextProviders.NativeWindowRenderContextProvider.windowHandle">
            <summary>
            The window handle.
            </summary>
        </member>
        <member name="T:SharpGL.DIBSection">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpGL.DIBSection.Create(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the specified width.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitCount">The bit count.</param>
            <returns></returns>
        </member>
        <member name="M:SharpGL.DIBSection.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the section.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitCount">The bit count.</param>
        </member>
        <member name="M:SharpGL.DIBSection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpGL.DIBSection.SetPixelFormat(System.IntPtr,System.Int32)">
            <summary>
            This function sets the pixel format of the underlying bitmap.
            </summary>
            <param name="bitCount">The bitcount.</param>
        </member>
        <member name="M:SharpGL.DIBSection.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="F:SharpGL.DIBSection.parentDC">
            <summary>
            The parent dc.
            </summary>
        </member>
        <member name="F:SharpGL.DIBSection.hBitmap">
            <summary>
            The bitmap handle.
            </summary>
        </member>
        <member name="F:SharpGL.DIBSection.bits">
            <summary>
            The bits.
            </summary>
        </member>
        <member name="F:SharpGL.DIBSection.width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:SharpGL.DIBSection.height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="P:SharpGL.DIBSection.HBitmap">
            <summary>
            Gets the handle to the bitmap.
            </summary>
            <value>The handle to the bitmap.</value>
        </member>
        <member name="P:SharpGL.DIBSection.Bits">
            <summary>
            Gets the bits.
            </summary>
        </member>
        <member name="P:SharpGL.DIBSection.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpGL.DIBSection.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
    </members>
</doc>
